//
//  XCUIElement+BDAlertHelper.m
//  WebDriverAgentLib
//
//  Created by Hui,Li on 2018/10/1.
//  Copyright © 2018 Facebook. All rights reserved.
//
#import "XCUIElement+BDAlertHelper.h"
#import <XCTest/XCUIElementTypes.h>
#import "XCUIElement+FBFind.h"
#import "FBFindElementCommands.h"

@implementation XCUIElement (BDAlertHelper)

//- (BOOL)bd_isPresentedAlertElement:(XCUIElement *)Element {
////  FBApplication *application = request.session.activeApplication;
////  XCUIElement *alert = application.alerts.element;
////  return alerts.element == Element;
//  return true;
//}
//  
////  XCUIElement *alert = application.alerts.element; [FBSpringboardApplication fb_springboard].fb_alertElement;
//}

- (BOOL)bd_isPresentedAlertElement:(FBApplication *)application {
  XCUIElement *alert = application.alerts.element;
  return [self isEqual:alert];
}

- (BOOL)bd_isAlertPresentedOnWindow:(FBRouteRequest *)request {
  FBAlert *alert = [FBAlert alertWithApplication:request.session.activeApplication];
  return alert;
}

//- (void)bd_handleAlertView:(FBRouteRequest *)request andApplication:(FBApplication *)application {
////  NSString *name = request.arguments[@"name"];
//  // test
//  NSString *name = @"accept";
//  FBAlert *alert = [FBAlert alertWithApplication:application];
//  NSError *error;
//  [alert clickAlertButton:name error:&error];
//}

- (BOOL)bd_handleAlertView:(FBRouteRequest *)request
                handleType:(BDAlertHandleType)type
                     error:(NSError **)error
{
  [FBLogger logFmt:@"<handle alert begin> call @selector(bd_handleAlertView:handleType:error)"];
  FBAlert *alert = [FBAlert alertWithApplication:request.session.activeApplication];
  if (!alert)
    return false;
  
  NSArray<XCUIElement *> *buttons = [self descendantsMatchingType:XCUIElementTypeButton].allElementsBoundByIndex;
  XCUIElement *requestedButton = [self bd_buttonForHandle:type withButtons:buttons];
  if (!requestedButton)
    return false;
  
  [FBLogger logFmt:@"<handle alert end> @selector(bd_handleAlertView:handleType:error)"];
  return [requestedButton bd_tapButtonOnAlertWithError:error];
}

- (XCUIElement *)bd_buttonForHandle:(BDAlertHandleType)handleType
                         withButtons:(NSArray<XCUIElement *>*)buttons {
  switch (handleType) {
    case BDAlertHandleRandom:
      return [self bd_chooseButtonRandomly:buttons];

    case BDAlertHandleAccept:
      return [self bd_chooseButtonInRegardToAcceptCommand:buttons];
      
    case BDAlertHandleDismiss:
      return [self bd_chooseButtonInRegardToDismissCommand:buttons];
      
    case BDAlertHandleFirst:
      ;
    default:
      return [self bd_chooseButtonAtFirst:buttons];
  }
}
  
- (XCUIElement *)bd_chooseButtonAtFirst:(NSArray<XCUIElement *>*)buttons {
  [FBLogger logFmt:@"<choose first button begin> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
  if ([buttons isKindOfClass:[NSArray class]] && buttons.count > 0) {
    [FBLogger logFmt:@"<choose first button end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
    return [buttons objectAtIndex:0];
  }
  return nil;
}
  
- (XCUIElement *)bd_chooseButtonRandomly:(NSArray<XCUIElement *>*)buttons {
  if ([buttons isKindOfClass:[NSArray class]])
    return [buttons objectAtIndex:arc4random() % [buttons count]];
  return nil;
}
  
- (XCUIElement *)bd_chooseButtonInRegardToAcceptCommand:(NSArray<XCUIElement *>*)buttons {
  [FBLogger logFmt:@"<choose accept button> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
  NSArray *labels = @[@"OK", @"Allow", @"允许", @"Will do", @"同意并继续", @"取消", @"我知道了"];
  if ([buttons isKindOfClass:[NSArray class]]) {
    for(XCUIElement *btn in buttons) {
        for (NSString *label in labels) {
          if([[btn wdLabel] isEqualToString:label]) {
             [FBLogger logFmt:@"<choose accept button end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
            return btn;
          }
        }
    }
    if ([buttons count] > 0) {
      [FBLogger logFmt:@"<choose accept button end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
      return [buttons objectAtIndex:0];
    } else {
       [FBLogger logFmt:@"<choose accept button end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
    }
      return nil;
  }
  [FBLogger logFmt:@"<choose accept button end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
  return nil;
}

- (XCUIElement *)bd_chooseButtonInRegardToDismissCommand:(NSArray<XCUIElement *>*)buttons {
  NSArray *labels = @[@"Don't allow", @"不允许", @"不同意", @"取消", @"我知道了"];
  if ([buttons isKindOfClass:[NSArray class]]) {
    for(XCUIElement *btn in buttons) {
      for (NSString *label in labels) {
        if([[btn wdLabel] isEqualToString:label])
          return btn;
      }
    }
    if ([buttons count] > 0)
      return [buttons objectAtIndex:0];
    else
      return nil;
  }
  return nil;
}

- (BOOL)bd_tapButtonOnAlertWithError:(NSError **)error {
  NSArray<NSDictionary<NSString *, id> *> *tapActions =
  @[
    @{
      @"action": @"tap",
      @"options": @{@"element": self}
      }
    ];
  return [self.application fb_performAppiumTouchActions:tapActions elementCache:nil error:error];
}

- (BOOL)bd_handleTipsView:(FBApplication *)application {
  [FBLogger logFmt:@"<handle tip view begin> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
  NSArray *labels = @[@"同意并继续", @"authorize close", @"Cancel", @"mms voice close normal", @"取消", @"关闭"];
  
//  NSArray<XCUIElement *> *allButtons = [application descendantsMatchingType:XCUIElementTypeButton].allElementsBoundByIndex;
////  NSArray<XCUIElement *> *allButtons = [self descendantsMatchingType:XCUIElementTypeButton].allElementsBoundByIndex;
//  // 处理非alertView，而是view的情形。点击‘X’
////  if ([allButtons count] > 0)
//  for (NSString *label in labels)
//    for(XCUIElement *btn in allButtons) {
//        if([[btn wdLabel] isEqualToString:label]) {
//          [btn bd_tapButtonOnAlertWithError:nil];
//          return true;
//        }
////    }
  
  for (NSString *label in labels){
    NSRange range = [self.debugDescription rangeOfString:label];
    if (range.location != NSNotFound) {
      XCUIElement* btn =  [[application fb_descendantsMatchingIdentifier:label shouldReturnAfterFirstMatch:YES] firstObject];
      [btn bd_tapButtonOnAlertWithError:nil];
    }
    continue;
  }
      
      
//      [(XCUIElement*)allButtons[label] tap];
//      XCUIElement *element = [self.class elementUsing:@"name" withValue:label under:application];
//      if (!element) {
//        return FBNoSuchElementErrorResponseForRequest(request);
//      }
      [FBLogger logFmt:@"<handle tip view end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
      return true;
      
    }
    
  }
  [FBLogger logFmt:@"<handle tip view end> call @selector(bd_chooseButtonInRegardToAcceptCommand:)"];
  return false;
}


@end
