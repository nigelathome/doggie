/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "FBDebugCommands.h"

#import "FBApplication.h"
#import "FBRouteRequest.h"
#import "FBSession.h"
#import "XCUIApplication+FBHelpers.h"
#import "XCUIElement+FBUtilities.h"
#import "FBXPath.h"
#import "XCUIElement+BDAlertHelper.h"

@implementation FBDebugCommands

#pragma mark - <FBCommandHandler>

+ (NSArray *)routes
{
  return
  @[
    [[FBRoute GET:@"/source"] respondWithTarget:self action:@selector(handleGetSourceCommand:)],
    [[FBRoute GET:@"/source"].withoutSession respondWithTarget:self action:@selector(handleGetSourceCommand:)],
    [[FBRoute GET:@"/wda/accessibleSource"] respondWithTarget:self action:@selector(handleGetAccessibleSourceCommand:)],
    [[FBRoute GET:@"/wda/accessibleSource"].withoutSession respondWithTarget:self action:@selector(handleGetAccessibleSourceCommand:)],
    [[FBRoute GET:@"/quickPageSource"] respondWithTarget:self action:@selector(handleGetQuickPageSourceCommand:)],
    [[FBRoute GET:@"/quickPageSource"].withoutSession respondWithTarget:self action:@selector(handleGetQuickPageSourceCommand:)],
  ];
}


#pragma mark - Commands

static NSString *const SOURCE_FORMAT_XML = @"xml";
static NSString *const SOURCE_FORMAT_JSON = @"json";
static NSString *const SOURCE_FORMAT_DESCRIPTION = @"description";

+ (id<FBResponsePayload>)handleGetSourceCommand:(FBRouteRequest *)request
{
  FBApplication *application = request.session.activeApplication ?: [FBApplication fb_activeApplication];
  NSString *sourceType = request.parameters[@"format"] ?: SOURCE_FORMAT_XML;
  id result;
  if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_XML] == NSOrderedSame) {
    [application fb_waitUntilSnapshotIsStable];
    result = [FBXPath xmlStringWithSnapshot:application.fb_lastSnapshot];
  } else if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_JSON] == NSOrderedSame) {
    result = application.fb_tree;
  } else if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_DESCRIPTION] == NSOrderedSame) {
    NSMutableArray<NSString *> *childrenDescriptions = [NSMutableArray array];
    for (XCUIElement *child in [application childrenMatchingType:XCUIElementTypeAny].allElementsBoundByIndex) {
      [childrenDescriptions addObject:child.debugDescription];
    }
    // debugDescription property of XCUIApplication instance shows descendants addresses in memory
    // instead of the actual information about them, however the representation works properly
    // for all descendant elements
    result = (0 == childrenDescriptions.count) ? application.debugDescription : [childrenDescriptions componentsJoinedByString:@"\n\n"];
  } else {
    return FBResponseWithStatus(
                                FBCommandStatusUnsupported,
                                [NSString stringWithFormat:@"Unknown source format '%@'. Only %@ source formats are supported.",
                                 sourceType, @[SOURCE_FORMAT_XML, SOURCE_FORMAT_JSON, SOURCE_FORMAT_DESCRIPTION]]
                                );
  }
  if (nil == result) {
    return FBResponseWithErrorFormat(@"Cannot get '%@' source of the current application", sourceType);
  }
  return FBResponseWithObject(result);
}

+ (id<FBResponsePayload>)handleGetAccessibleSourceCommand:(FBRouteRequest *)request
{
  FBApplication *application = request.session.activeApplication;
  return FBResponseWithObject(application.fb_accessibilityTree ?: @{});
}

+ (id<FBResponsePayload>)handleGetQuickPageSourceCommand:(FBRouteRequest *)request
{
  [FBLogger logFmt:@"handleGetQuickPageSourceCommand"];
  FBApplication *application = request.session.activeApplication;
  id result;
  
  NSArray<XCUIElement *> *allElements = [application childrenMatchingType:XCUIElementTypeAny].allElementsBoundByIndex;
  BOOL handleAlert = [(XCUIElement*)[allElements objectAtIndex:0] bd_handleAlertView:request
                                                       handleType:BDAlertHandleFirst error:nil];
  if (handleAlert) {
    result = @"handleAlert done";
    return FBResponseWithObject(result);
  }
  

//  for (XCUIElement *child in allElements) {
//    NSLog(@"%@", child.description);
//  }
  BOOL handleTipView = false;
  if ([allElements count] > 0) {
    if ([allElements count] < 4)
      handleTipView = [(XCUIElement*)[allElements objectAtIndex:0] bd_handleTipsView:application];
    else {
      handleTipView = [(XCUIElement*)[allElements objectAtIndex:0] bd_handleTipsView:application];
      if (!handleTipView)
          handleTipView = [(XCUIElement*)[allElements objectAtIndex:(allElements.count-1)] bd_handleTipsView:application];
    }
  }
  
  if (handleTipView) {
    result = @"handleTipView done";
    return FBResponseWithObject(result);
  }
  
  NSString *sourceType = request.parameters[@"format"] ?: SOURCE_FORMAT_DESCRIPTION;
//  id result;
  if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_XML] == NSOrderedSame) {
    [application fb_waitUntilSnapshotIsStable];
    result = [FBXPath xmlStringWithSnapshot:application.fb_lastSnapshot];
  } else if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_JSON] == NSOrderedSame) {
    result = application.fb_tree;
  } else if ([sourceType caseInsensitiveCompare:SOURCE_FORMAT_DESCRIPTION] == NSOrderedSame) {
    NSMutableArray<NSString *> *childrenDescriptions = [NSMutableArray array];
    NSLog(@"SOURCE_FORMAT_DESCRIPTION");
//    NSArray<XCUIElement *> *allElements = [application childrenMatchingType:XCUIElementTypeAny].allElementsBoundByIndex;

//    NSArray<XCUIElement *> *allButtons = [application descendantsMatchingType:XCUIElementTypeButton].allElementsBoundByIndex;
    
//    if ([allElements count] > 0) {
//      [(XCUIElement*)[allElements objectAtIndex:0] bd_handleAlertView:request
//                                                          handleType:BDAlertHandleFirst error:nil];
//      [(XCUIElement*)[allElements objectAtIndex:0] bd_handleTipsView:application];
//    }
    
    //处理非alertView，而是view的情形。点击‘X’
//    if ([allButtons count] > 0)
//      for(XCUIElement *btn in allButtons) {
//          if([[btn wdLabel] isEqualToString:@"authorize close"])
//            [btn bd_tapButtonOnAlertWithError:nil];
//      }
    
//    if ([allElements count] < 4)
    
      
    for (XCUIElement *child in allElements) {
//      NSLog(@"child: %@", child);
//      XCUIElementQuery *childElementsQuery = [child descendantsMatchingType:XCUIElementTypeAlert];
//      NSLog(@"childElementsQuery: %@", childElementsQuery);
//      NSArray *accessibilityEles = childElementsQuery.accessibilityElements;
//      NSLog(@"accessibilityEles: %@", accessibilityEles);
//      XCUIElementType type = child.elementType;
//      NSLog(@"type: %lu", (unsigned long)type);
//      if ([(XCUIElement*)child bd_isPresentedAlertElement:application]) {
//        [child bd_handleAlertView:request andApplication:application];
//      } else
      [childrenDescriptions addObject:child.debugDescription];
    }
//      XCUIElementQuery *alertQuery = application.windows.alerts;
//      XCUIElementType alertQueryType = alertQuery.element.elementType;
      
//      FBAlert *alert = [FBAlert alertWithApplication:request.session.activeApplication];
//      [alert clickAlertButton:@"Will do" error:nil];
//      [child bd_clickAlertButtonWithRequest:request error:nil];

//    }
    
    // debugDescription property of XCUIApplication instance shows descendants addresses in memory
    // instead of the actual information about them, however the representation works properly
    // for all descendant elements
    result = (0 == childrenDescriptions.count) ? application.debugDescription : [childrenDescriptions componentsJoinedByString:@"\n\n"];
//    result = (0 == allElements.count) ? application.debugDescription : allElements.firstObject.debugDescription;
  } else {
    return FBResponseWithStatus(
      FBCommandStatusUnsupported,
      [NSString stringWithFormat:@"Unknown source format '%@'. Only %@ source formats are supported.",
       sourceType, @[SOURCE_FORMAT_XML, SOURCE_FORMAT_JSON, SOURCE_FORMAT_DESCRIPTION]]
    );
  }
  if (nil == result) {
    return FBResponseWithErrorFormat(@"Cannot get '%@' source of the current application", sourceType);
  }
  return FBResponseWithObject(result);
}


@end
