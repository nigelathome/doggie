'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeSimctl = require('node-simctl');

var _wdaWebdriveragent = require('./wda/webdriveragent');

var _wdaWebdriveragent2 = _interopRequireDefault(_wdaWebdriveragent);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _simulatorManagement = require('./simulator-management');

var _appiumIosSimulator = require('appium-ios-simulator');

var _asyncbox = require('asyncbox');

var _appiumIosDriver = require('appium-ios-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _utils = require('./utils');

var _realDeviceManagement = require('./real-device-management');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncLock = require('async-lock');

var _asyncLock2 = _interopRequireDefault(_asyncLock);

var SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
var WDA_SIM_STARTUP_RETRIES = 2;
var WDA_REAL_DEV_STARTUP_RETRIES = 1;
var WDA_REAL_DEV_TUTORIAL_URL = 'https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md';
var WDA_STARTUP_RETRY_INTERVAL = 10000;
var DEFAULT_SETTINGS = {
  nativeWebTap: false,
  useJSONSource: false
};
// This lock assures, that each driver session does not
// affect shared resources of the other parallel sessions
var SHARED_RESOURCES_GUARD = new _asyncLock2['default']();

var NO_PROXY_NATIVE_LIST = [['GET', /^\/session\/[^\/]+$/], ['GET', /context/], ['POST', /context/], ['GET', /url/], ['POST', /url/], ['GET', /window/], ['POST', /window/], ['DELETE', /window/], ['POST', /execute/], ['POST', /element$/], ['POST', /elements$/], ['POST', /timeouts/], ['GET', /alert_text/], ['POST', /alert_text/], ['POST', /accept_alert/], ['POST', /dismiss_alert/], ['POST', /alert\/text$/], ['GET', /source/], ['GET', /quick_source/], ['GET', /screenshot/], ['POST', /appium/], ['GET', /appium/], ['POST', /touch/], ['GET', /log/], ['POST', /log/], ['POST', /moveto/], ['POST', /receive_async_response/], // always, in case context switches while waiting
['GET', /location/], ['GET', /attribute/], ['GET', /size/], ['POST', /value/], ['POST', /keys/], ['POST', /back/], ['POST', /session\/[^\/]+\/location/], // geo location, but not element location
['POST', /appium\/device\/lock/], ['POST', /shake/], ['POST', /clear/]];
var NO_PROXY_WEB_LIST = [['GET', /title/], ['POST', /element/], ['POST', /forward/], ['GET', /attribute/], ['GET', /text/], ['POST', /clear/], ['GET', /element/], ['POST', /click/], ['POST', /refresh/], ['GET', /cookie/], ['POST', /cookie/], ['DELETE', /cookie/], ['POST', /frame/], ['POST', /keys/]].concat(NO_PROXY_NATIVE_LIST);

var XCUITestDriver = (function (_BaseDriver) {
  _inherits(XCUITestDriver, _BaseDriver);

  function XCUITestDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, XCUITestDriver);

    _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.desiredCapConstraints = _desiredCaps2['default'];

    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', '-ios predicate string', '-ios class chain', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'link text', 'partial link text'];
    this.resetIos();
    this.settings = new _appiumBaseDriver.DeviceSettings(DEFAULT_SETTINGS, this.onSettingsUpdate.bind(this));
  }

  _createClass(XCUITestDriver, [{
    key: 'onSettingsUpdate',
    value: function onSettingsUpdate(key, value) {
      return _regeneratorRuntime.async(function onSettingsUpdate$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (key === 'nativeWebTap') {
              this.opts.nativeWebTap = !!value;
            }

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'resetIos',
    value: function resetIos() {
      this.opts = this.opts || {};
      this.wda = null;
      this.opts.device = null;
      this.jwpProxyActive = false;
      this.proxyReqRes = null;
      this.jwpProxyAvoid = [];
      this.safari = false;
      this.cachedWdaStatus = null;

      // some things that commands imported from appium-ios-driver need
      this.curWebFrames = [];
      this.webElementIds = [];
      this._currentUrl = null;
      this.curContext = null;
      this.xcodeVersion = null;
      this.iosSdkVersion = null;
      this.contexts = [];
      this.implicitWaitMs = 0;
      this.asynclibWaitMs = 0;
      this.pageLoadMs = 6000;
      this.landscapeWebCoordsOffset = 0;
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      var status;
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(typeof this.driverInfo === 'undefined')) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utils.getDriverInfo)());

          case 3:
            this.driverInfo = context$2$0.sent;

          case 4:
            status = { build: { version: this.driverInfo.version } };

            if (this.cachedWdaStatus) {
              status.wda = this.cachedWdaStatus;
            }
            return context$2$0.abrupt('return', status);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSession',
    value: function createSession() {
      var _len,
          args,
          _key,
          _ref,
          _ref2,
          sessionId,
          caps,
          args$2$0 = arguments;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.lifecycleData = {}; // this is used for keeping track of the state we start so when we delete the session we can put things back
            context$2$0.prev = 1;

            for (_len = args$2$0.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = args$2$0[_key];
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'createSession', this).apply(this, args));

          case 5:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            sessionId = _ref2[0];
            caps = _ref2[1];

            this.opts.sessionId = sessionId;

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.start());

          case 12:

            // merge server capabilities + desired capabilities
            caps = _Object$assign({}, _appiumIosDriver.defaultServerCaps, caps);
            // update the udid with what is actually used
            caps.udid = this.opts.udid;
            // ensure we track nativeWebTap capability as a setting as well

            if (!_lodash2['default'].has(this.opts, 'nativeWebTap')) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.updateSettings({ nativeWebTap: this.opts.nativeWebTap }));

          case 17:
            if (!_lodash2['default'].has(this.opts, 'useJSONSource')) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.updateSettings({ useJSONSource: this.opts.useJSONSource }));

          case 20:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 23:
            context$2$0.prev = 23;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].error(context$2$0.t0);
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 28:
            throw context$2$0.t0;

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 23]]);
    }
  }, {
    key: 'start',
    value: function start() {
      var tools, _ref3, device, udid, realDevice, msg, startLogCapture, isLogCaptureStarted;

      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.opts.noReset = !!this.opts.noReset;
            this.opts.fullReset = !!this.opts.fullReset;

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _utils.printUser)());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _utils.printLibimobiledeviceInfo)());

          case 6:
            if (this.xcodeVersion) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _utils.getAndCheckXcodeVersion)());

          case 9:
            this.xcodeVersion = context$2$0.sent;
            tools = !this.xcodeVersion.toolsVersion ? '' : '(tools v' + this.xcodeVersion.toolsVersion + ')';

            _logger2['default'].debug('Xcode version set to \'' + this.xcodeVersion.versionString + '\' ' + tools);

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap((0, _utils.getAndCheckIosSdkVersion)());

          case 14:
            this.iosSdkVersion = context$2$0.sent;

            _logger2['default'].debug('iOS SDK Version set to \'' + this.iosSdkVersion + '\'');

            if (!(this.opts.platformVersion && parseFloat(this.opts.platformVersion) < 9.3)) {
              context$2$0.next = 18;
              break;
            }

            throw Error('Platform version must be 9.3 or above. \'' + this.opts.platformVersion + '\' is not supported.');

          case 18:

            this.logEvent('xcodeDetailsRetrieved');

            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.determineDevice());

          case 21:
            _ref3 = context$2$0.sent;
            device = _ref3.device;
            udid = _ref3.udid;
            realDevice = _ref3.realDevice;

            _logger2['default'].info('Determining device to run tests on: udid: \'' + udid + '\', real device: ' + realDevice);
            this.opts.device = device;
            this.opts.udid = udid;
            this.opts.realDevice = realDevice;

            if (!(this.isSimulator() && this.opts.customSSLCert)) {
              context$2$0.next = 33;
              break;
            }

            context$2$0.next = 32;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.installSSLCert)(this.opts.customSSLCert, this.opts.udid));

          case 32:
            this.logEvent('customCertInstalled');

          case 33:
            if (!(this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice())) {
              context$2$0.next = 40;
              break;
            }

            context$2$0.next = 36;
            return _regeneratorRuntime.awrap((0, _utils.resetXCTestProcesses)(this.opts.udid, true));

          case 36:
            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(this.opts.device.shutdown());

          case 38:
            context$2$0.next = 40;
            return _regeneratorRuntime.awrap(this.startHttpsAsyncServer());

          case 40:
            if (this.opts.platformVersion) {
              context$2$0.next = 48;
              break;
            }

            if (!(this.opts.device && _lodash2['default'].isFunction(this.opts.device.getPlatformVersion))) {
              context$2$0.next = 48;
              break;
            }

            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(this.opts.device.getPlatformVersion());

          case 44:
            this.opts.platformVersion = context$2$0.sent;

            _logger2['default'].info('No platformVersion specified. Using device version: \'' + this.opts.platformVersion + '\'');
            context$2$0.next = 48;
            break;

          case 48:
            // TODO: this is when it is a real device. when we have a real object wire it in

            if (!this.opts.webDriverAgentUrl) {
              // make sure that the xcode we are using can handle the platform
              if (parseFloat(this.opts.platformVersion) > parseFloat(this.iosSdkVersion)) {
                msg = 'Xcode ' + this.xcodeVersion.versionString + ' has a maximum SDK version of ' + this.iosSdkVersion + '. ' + ('It does not support iOS version ' + this.opts.platformVersion);

                _logger2['default'].errorAndThrow(msg);
              }
            } else {
              _logger2['default'].debug('Xcode version will not be validated against iOS SDK version because webDriverAgentUrl capability is set (' + this.opts.webDriverAgentUrl + ').');
            }

            if (!((this.opts.browserName || '').toLowerCase() === 'safari')) {
              context$2$0.next = 59;
              break;
            }

            _logger2['default'].info('Safari test requested');
            this.safari = true;
            this.opts.app = undefined;
            this.opts.processArguments = this.opts.processArguments || {};
            this.opts.bundleId = SAFARI_BUNDLE_ID;
            this._currentUrl = this.opts.safariInitialUrl || (this.isRealDevice() ? 'http://appium.io' : 'http://' + this.opts.address + ':' + this.opts.port + '/welcome');
            this.opts.processArguments.args = ['-u', this._currentUrl];
            context$2$0.next = 61;
            break;

          case 59:
            context$2$0.next = 61;
            return _regeneratorRuntime.awrap(this.configureApp());

          case 61:
            this.logEvent('appConfigured');

            // fail very early if the app doesn't actually exist
            // or if bundle id doesn't point to an installed app

            if (!this.opts.app) {
              context$2$0.next = 65;
              break;
            }

            context$2$0.next = 65;
            return _regeneratorRuntime.awrap((0, _utils.checkAppPresent)(this.opts.app));

          case 65:
            if (this.opts.bundleId) {
              context$2$0.next = 69;
              break;
            }

            context$2$0.next = 68;
            return _regeneratorRuntime.awrap(this.extractBundleId(this.opts.app));

          case 68:
            this.opts.bundleId = context$2$0.sent;

          case 69:
            context$2$0.next = 71;
            return _regeneratorRuntime.awrap(this.runReset());

          case 71:
            startLogCapture = function startLogCapture() {
              var result;
              return _regeneratorRuntime.async(function startLogCapture$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.startLogCapture());

                  case 2:
                    result = context$3$0.sent;

                    if (result) {
                      this.logEvent('logCaptureStarted');
                    }
                    return context$3$0.abrupt('return', result);

                  case 5:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };

            context$2$0.next = 74;
            return _regeneratorRuntime.awrap(startLogCapture());

          case 74:
            isLogCaptureStarted = context$2$0.sent;

            _logger2['default'].info('Setting up ' + (this.isRealDevice() ? 'real device' : 'simulator'));

            if (!this.isSimulator()) {
              context$2$0.next = 90;
              break;
            }

            context$2$0.next = 79;
            return _regeneratorRuntime.awrap(_appiumIosDriver.settings.setLocale(this.opts.device, this.opts, {}, this.isSafari()));

          case 79:
            this.localeConfig = context$2$0.sent;
            context$2$0.next = 82;
            return _regeneratorRuntime.awrap(_appiumIosDriver.settings.setPreferences(this.opts.device, this.opts, this.isSafari()));

          case 82:
            context$2$0.next = 84;
            return _regeneratorRuntime.awrap(this.opts.device.clearCaches('com.apple.mobile.installd.staging'));

          case 84:
            context$2$0.next = 86;
            return _regeneratorRuntime.awrap(this.startSim());

          case 86:
            this.logEvent('simStarted');

            if (isLogCaptureStarted) {
              context$2$0.next = 90;
              break;
            }

            context$2$0.next = 90;
            return _regeneratorRuntime.awrap(startLogCapture());

          case 90:
            if (!this.opts.app) {
              context$2$0.next = 94;
              break;
            }

            context$2$0.next = 93;
            return _regeneratorRuntime.awrap(this.installApp());

          case 93:
            this.logEvent('appInstalled');

          case 94:
            if (!(!this.opts.app && this.opts.bundleId && !this.safari)) {
              context$2$0.next = 99;
              break;
            }

            context$2$0.next = 97;
            return _regeneratorRuntime.awrap(this.opts.device.isAppInstalled(this.opts.bundleId));

          case 97:
            if (context$2$0.sent) {
              context$2$0.next = 99;
              break;
            }

            _logger2['default'].errorAndThrow('App with bundle identifier \'' + this.opts.bundleId + '\' unknown');

          case 99:
            context$2$0.next = 101;
            return _regeneratorRuntime.awrap(SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.startWda(this.opts.sessionId, realDevice));

                  case 2:
                    return context$3$0.abrupt('return', context$3$0.sent);

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 101:
            context$2$0.next = 103;
            return _regeneratorRuntime.awrap(this.setInitialOrientation(this.opts.orientation));

          case 103:
            this.logEvent('orientationSet');

            if (!(this.isRealDevice() && this.opts.startIWDP)) {
              context$2$0.next = 114;
              break;
            }

            context$2$0.prev = 105;
            context$2$0.next = 108;
            return _regeneratorRuntime.awrap(this.startIWDP());

          case 108:
            _logger2['default'].debug('Started ios_webkit_debug proxy server at: ' + this.iwdpServer.endpoint);
            context$2$0.next = 114;
            break;

          case 111:
            context$2$0.prev = 111;
            context$2$0.t0 = context$2$0['catch'](105);

            _logger2['default'].errorAndThrow('Could not start ios_webkit_debug_proxy server: ' + context$2$0.t0.message);

          case 114:
            if (!(this.isSafari() || this.opts.autoWebview)) {
              context$2$0.next = 119;
              break;
            }

            _logger2['default'].debug('Waiting for initial webview');
            context$2$0.next = 118;
            return _regeneratorRuntime.awrap(this.navToInitialWebview());

          case 118:
            this.logEvent('initialWebviewNavigated');

          case 119:
            if (this.isRealDevice()) {
              context$2$0.next = 128;
              break;
            }

            if (!this.opts.calendarAccessAuthorized) {
              context$2$0.next = 125;
              break;
            }

            context$2$0.next = 123;
            return _regeneratorRuntime.awrap(this.opts.device.enableCalendarAccess(this.opts.bundleId));

          case 123:
            context$2$0.next = 128;
            break;

          case 125:
            if (!(this.opts.calendarAccessAuthorized === false)) {
              context$2$0.next = 128;
              break;
            }

            context$2$0.next = 128;
            return _regeneratorRuntime.awrap(this.opts.device.disableCalendarAccess(this.opts.bundleId));

          case 128:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[105, 111]]);
    }
  }, {
    key: 'startWda',
    value: function startWda(sessionId, realDevice) {
      var quitAndUninstall, startupRetries, startupRetryInterval;
      return _regeneratorRuntime.async(function startWda$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.wda = new _wdaWebdriveragent2['default'](this.xcodeVersion, this.opts);

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.wda.cleanupObsoleteProcesses());

          case 3:
            if (!this.opts.useNewWDA) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Capability \'useNewWDA\' set to true, so uninstalling WDA before proceeding');
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.wda.quit());

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.wda.uninstall());

          case 9:
            this.logEvent('wdaUninstalled');
            context$2$0.next = 20;
            break;

          case 12:
            context$2$0.t0 = !_appiumSupport.util.hasValue(this.wda.webDriverAgentUrl);

            if (!context$2$0.t0) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.wda.isRunning());

          case 16:
            context$2$0.t0 = context$2$0.sent;

          case 17:
            if (!context$2$0.t0) {
              context$2$0.next = 20;
              break;
            }

            _logger2['default'].info('Will reuse previously cached WDA instance at \'' + this.wda.url.href + '\'. ' + ('Set the wdaLocalPort capability to a value different from ' + this.wda.url.port + ' ') + 'if this is an undesired behavior.');
            this.wda.webDriverAgentUrl = this.wda.url.href;

          case 20:
            quitAndUninstall = function quitAndUninstall(msg) {
              return _regeneratorRuntime.async(function quitAndUninstall$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    _logger2['default'].debug(msg);
                    _logger2['default'].debug('Quitting and uninstalling WebDriverAgent, then retrying');
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.wda.quit());

                  case 4:
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(this.wda.uninstall());

                  case 6:
                    throw new Error(msg);

                  case 7:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            };

            startupRetries = this.opts.wdaStartupRetries || (this.isRealDevice() ? WDA_REAL_DEV_STARTUP_RETRIES : WDA_SIM_STARTUP_RETRIES);
            startupRetryInterval = this.opts.wdaStartupRetryInterval || WDA_STARTUP_RETRY_INTERVAL;
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(startupRetries, startupRetryInterval, function callee$2$0() {
              var errorMsg;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this3 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.logEvent('wdaStartAttempted');
                    context$3$0.prev = 1;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.wda.launch(sessionId, realDevice));

                  case 4:
                    this.cachedWdaStatus = context$3$0.sent;
                    context$3$0.next = 14;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](1);

                    this.logEvent('wdaStartFailed');
                    errorMsg = 'Unable to launch WebDriverAgent because of xcodebuild failure: "' + context$3$0.t0.message + '".';

                    if (this.isRealDevice()) {
                      errorMsg += ' Make sure you follow the tutorial at ' + WDA_REAL_DEV_TUTORIAL_URL + '. ' + 'Try to remove the WebDriverAgentRunner application from the device if it is installed ' + 'and reboot the device.';
                    }
                    context$3$0.next = 14;
                    return _regeneratorRuntime.awrap(quitAndUninstall(errorMsg));

                  case 14:

                    this.proxyReqRes = this.wda.proxyReqRes.bind(this.wda);
                    this.jwpProxyActive = true;

                    context$3$0.prev = 16;
                    context$3$0.next = 19;
                    return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(15, 1000, function callee$3$0() {
                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            this.logEvent('wdaSessionAttempted');
                            _logger2['default'].debug('Sending createSession command to WDA');
                            context$4$0.prev = 2;
                            context$4$0.t0 = this.cachedWdaStatus;

                            if (context$4$0.t0) {
                              context$4$0.next = 8;
                              break;
                            }

                            context$4$0.next = 7;
                            return _regeneratorRuntime.awrap(this.proxyCommand('/status', 'GET'));

                          case 7:
                            context$4$0.t0 = context$4$0.sent;

                          case 8:
                            this.cachedWdaStatus = context$4$0.t0;
                            context$4$0.next = 11;
                            return _regeneratorRuntime.awrap(this.startWdaSession(this.opts.bundleId, this.opts.processArguments));

                          case 11:
                            context$4$0.next = 17;
                            break;

                          case 13:
                            context$4$0.prev = 13;
                            context$4$0.t1 = context$4$0['catch'](2);

                            _logger2['default'].debug('Failed to create WDA session. Retrying...');
                            throw context$4$0.t1;

                          case 17:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this3, [[2, 13]]);
                    }));

                  case 19:
                    this.logEvent('wdaSessionStarted');
                    context$3$0.next = 28;
                    break;

                  case 22:
                    context$3$0.prev = 22;
                    context$3$0.t1 = context$3$0['catch'](16);
                    errorMsg = 'Unable to start WebDriverAgent session because of xcodebuild failure: "' + context$3$0.t1.message + '".';

                    if (this.isRealDevice()) {
                      errorMsg += ' Make sure you follow the tutorial at ' + WDA_REAL_DEV_TUTORIAL_URL + '. ' + 'Try to remove the WebDriverAgentRunner application from the device if it is installed ' + 'and reboot the device.';
                    }
                    context$3$0.next = 28;
                    return _regeneratorRuntime.awrap(quitAndUninstall(errorMsg));

                  case 28:

                    if (!_appiumSupport.util.hasValue(this.opts.preventWDAAttachments)) {
                      // XCTest prior to Xcode 9 SDK has no native way to disable attachments
                      this.opts.preventWDAAttachments = this.xcodeVersion.major < 9;
                      if (this.opts.preventWDAAttachments) {
                        _logger2['default'].info('Enabled WDA attachments prevention by default to save the disk space. ' + 'Set preventWDAAttachments capability to false if this is an undesired behavior.');
                      }
                    }

                    if (!this.opts.preventWDAAttachments) {
                      context$3$0.next = 33;
                      break;
                    }

                    context$3$0.next = 32;
                    return _regeneratorRuntime.awrap((0, _utils.adjustWDAAttachmentsPermissions)(this.wda, this.opts.preventWDAAttachments ? '555' : '755'));

                  case 32:
                    this.logEvent('wdaPermsAdjusted');

                  case 33:
                    if (!this.opts.clearSystemFiles) {
                      context$3$0.next = 36;
                      break;
                    }

                    context$3$0.next = 36;
                    return _regeneratorRuntime.awrap((0, _utils.markSystemFilesForCleanup)(this.wda));

                  case 36:

                    // we expect certain socket errors until this point, but now
                    // mark things as fully working
                    this.wda.fullyStarted = true;
                    this.logEvent('wdaStarted');

                  case 38:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[1, 7], [16, 22]]);
            }));

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // create an alias so we can actually unit test createSession by stubbing
    // this
  }, {
    key: 'extractBundleId',
    value: function extractBundleId(app) {
      return _regeneratorRuntime.async(function extractBundleId$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumIosDriver.appUtils.extractBundleId(app));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'runReset',
    value: function runReset() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
      return _regeneratorRuntime.async(function runReset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.logEvent('resetStarted');

            if (!this.isRealDevice()) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.runRealDeviceReset)(this.opts.device, opts || this.opts));

          case 4:
            context$2$0.next = 8;
            break;

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.runSimulatorReset)(this.opts.device, opts || this.opts));

          case 8:
            this.logEvent('resetComplete');

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.stop());

                  case 2:
                    if (!this.opts.preventWDAAttachments) {
                      context$3$0.next = 5;
                      break;
                    }

                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap((0, _utils.adjustWDAAttachmentsPermissions)(this.wda, '755'));

                  case 5:
                    if (!this.opts.clearSystemFiles) {
                      context$3$0.next = 10;
                      break;
                    }

                    context$3$0.next = 8;
                    return _regeneratorRuntime.awrap((0, _utils.clearSystemFiles)(this.wda, !!this.opts.showXcodeLog));

                  case 8:
                    context$3$0.next = 11;
                    break;

                  case 10:
                    _logger2['default'].debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');

                  case 11:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this4);
            }));

          case 2:
            if (!this.isWebContext()) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].debug('In a web session. Removing remote debugger');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.stopRemote());

          case 6:
            if (!(this.opts.resetOnSessionStartOnly === false)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.runReset());

          case 9:
            if (!(this.isSimulator() && this.opts.udid && this.opts.customSSLCert)) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.uninstallSSLCert)(this.opts.customSSLCert, this.opts.udid));

          case 12:
            if (!(this.isSimulator() && !this.opts.noReset && !!this.opts.device)) {
              context$2$0.next = 21;
              break;
            }

            if (!this.lifecycleData.createSim) {
              context$2$0.next = 21;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _utils.resetXCTestProcesses)(this.opts.udid, true));

          case 16:
            _logger2['default'].debug('Deleting simulator created for this run (udid: \'' + this.opts.udid + '\')');
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.opts.device.shutdown());

          case 19:
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.opts.device['delete']());

          case 21:

            if (!_lodash2['default'].isEmpty(this.logs)) {
              this.logs.syslog.stopCapture();
              this.logs = {};
            }

            if (this.iwdpServer) {
              this.stopIWDP();
            }

            if (!(this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice())) {
              context$2$0.next = 26;
              break;
            }

            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.stopHttpsAsyncServer());

          case 26:

            this.resetIos();

            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'deleteSession', this).call(this));

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.jwpProxyActive = false;
            this.proxyReqRes = null;

            if (!(this.wda && this.wda.fullyStarted)) {
              context$2$0.next = 15;
              break;
            }

            if (!this.wda.jwproxy) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.prev = 4;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.proxyCommand('/session/' + this.sessionId, 'DELETE'));

          case 7:
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](4);

            // an error here should not short-circuit the rest of clean up
            _logger2['default'].debug('Unable to DELETE session on WDA: \'' + context$2$0.t0.message + '\'. Continuing shutdown.');

          case 12:
            if (!(this.wda && !this.wda.webDriverAgentUrl && this.opts.useNewWDA)) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.wda.quit());

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[4, 9]]);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      var _get2;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Executing command \'' + cmd + '\'');

            if (!(cmd === 'receiveAsyncResponse')) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.receiveAsyncResponse.apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
            if (!(cmd === 'getStatus')) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.getStatus());

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((_get2 = _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 11:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'configureApp',
    value: function configureApp() {
      var appIsPackageOrBundle;
      return _regeneratorRuntime.async(function configureApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            appIsPackageOrBundle = function appIsPackageOrBundle(app) {
              return (/^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app)
              );
            };

            // the app name is a bundleId assign it to the bundleId property
            if (!this.opts.bundleId && appIsPackageOrBundle(this.opts.app)) {
              this.opts.bundleId = this.opts.app;
              this.opts.app = '';
            }
            // we have a bundle ID, but no app, or app is also a bundle

            if (!(this.opts.bundleId && appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === '' || appIsPackageOrBundle(this.opts.app)))) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].debug('App is an iOS bundle, will attempt to run as pre-existing');
            return context$2$0.abrupt('return');

          case 5:
            if (!(this.opts.app && this.opts.app.toLowerCase() === 'settings')) {
              context$2$0.next = 11;
              break;
            }

            this.opts.bundleId = 'com.apple.Preferences';
            this.opts.app = null;
            return context$2$0.abrupt('return');

          case 11:
            if (!(this.opts.app && this.opts.app.toLowerCase() === 'calendar')) {
              context$2$0.next = 15;
              break;
            }

            this.opts.bundleId = 'com.apple.mobilecal';
            this.opts.app = null;
            return context$2$0.abrupt('return');

          case 15:
            context$2$0.prev = 15;
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, '.app', this.opts.mountRoot, this.opts.windowsShareUserName, this.opts.windowsSharePassword));

          case 18:
            this.opts.app = context$2$0.sent;
            context$2$0.next = 25;
            break;

          case 21:
            context$2$0.prev = 21;
            context$2$0.t0 = context$2$0['catch'](15);

            _logger2['default'].error(context$2$0.t0);
            throw new Error('Bad app: ' + this.opts.app + '. App paths need to be absolute, or relative to the appium ' + 'server install dir, or a URL to compressed file, or a special app name.');

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[15, 21]]);
    }
  }, {
    key: 'determineDevice',
    value: function determineDevice() {
      var _device, _device3, devices, _device2, device, _device4;

      return _regeneratorRuntime.async(function determineDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // in the one case where we create a sim, we will set this state
            this.lifecycleData.createSim = false;

            // if we get generic names, translate them
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utils.translateDeviceName)(this.xcodeVersion, this.opts.platformVersion, this.opts.deviceName));

          case 3:
            this.opts.deviceName = context$2$0.sent;
            context$2$0.t0 = this.opts.udid;

            if (!context$2$0.t0) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.simExists)(this.opts.udid));

          case 8:
            context$2$0.t0 = context$2$0.sent;

          case 9:
            if (!context$2$0.t0) {
              context$2$0.next = 14;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(this.opts.udid));

          case 12:
            _device = context$2$0.sent;
            return context$2$0.abrupt('return', { device: _device, realDevice: false, udid: this.opts.udid });

          case 14:
            if (!this.opts.udid) {
              context$2$0.next = 43;
              break;
            }

            if (!(this.opts.udid.toLowerCase() === 'auto')) {
              context$2$0.next = 33;
              break;
            }

            context$2$0.prev = 16;
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap((0, _utils.detectUdid)());

          case 19:
            this.opts.udid = context$2$0.sent;
            context$2$0.next = 31;
            break;

          case 22:
            context$2$0.prev = 22;
            context$2$0.t1 = context$2$0['catch'](16);

            // Trying to find matching UDID for Simulator
            _logger2['default'].warn('Cannot detect any connected real devices. Falling back to Simulator. Original error: ' + context$2$0.t1.message);
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.getExistingSim)(this.opts));

          case 27:
            _device3 = context$2$0.sent;

            if (!_device3) {
              // No matching Simulator is found. Throw an error
              _logger2['default'].errorAndThrow('Cannot detect udid for ' + this.opts.deviceName + ' Simulator running iOS ' + this.opts.platformVersion);
            }
            // Matching Simulator exists and is found. Use it
            this.opts.udid = _device3.udid;
            return context$2$0.abrupt('return', { device: _device3, realDevice: false, udid: _device3.udid });

          case 31:
            context$2$0.next = 39;
            break;

          case 33:
            context$2$0.next = 35;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.getConnectedDevices)());

          case 35:
            devices = context$2$0.sent;

            _logger2['default'].debug('Available devices: ' + devices.join(', '));

            if (!(devices.indexOf(this.opts.udid) === -1)) {
              context$2$0.next = 39;
              break;
            }

            throw new Error('Unknown device or simulator UDID: \'' + this.opts.udid + '\'');

          case 39:
            context$2$0.next = 41;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.getRealDeviceObj)(this.opts.udid));

          case 41:
            _device2 = context$2$0.sent;
            return context$2$0.abrupt('return', { device: _device2, realDevice: true, udid: this.opts.udid });

          case 43:
            context$2$0.next = 45;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.getExistingSim)(this.opts));

          case 45:
            device = context$2$0.sent;

            if (!device) {
              context$2$0.next = 48;
              break;
            }

            return context$2$0.abrupt('return', { device: device, realDevice: false, udid: device.udid });

          case 48:

            // no device of this type exists, so create one
            _logger2['default'].info('Simulator udid not provided, using desired caps to create a new simulator');
            if (!this.opts.platformVersion) {
              _logger2['default'].info('No platformVersion specified. Using latest version Xcode supports: \'' + this.iosSdkVersion + '\' ' + 'This may cause problems if a simulator does not exist for this platform version.');
              this.opts.platformVersion = this.iosSdkVersion;
            }

            if (!this.opts.noReset) {
              context$2$0.next = 56;
              break;
            }

            context$2$0.next = 53;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.getExistingSim)(this.opts));

          case 53:
            _device4 = context$2$0.sent;

            if (!_device4) {
              context$2$0.next = 56;
              break;
            }

            return context$2$0.abrupt('return', { device: _device4, realDevice: false, udid: _device4.udid });

          case 56:
            context$2$0.next = 58;
            return _regeneratorRuntime.awrap(this.createSim());

          case 58:
            device = context$2$0.sent;
            return context$2$0.abrupt('return', { device: device, realDevice: false, udid: device.udid });

          case 60:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[16, 22]]);
    }
  }, {
    key: 'startSim',
    value: function startSim() {
      var runOpts, orientation;
      return _regeneratorRuntime.async(function startSim$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            runOpts = {
              scaleFactor: this.opts.scaleFactor,
              connectHardwareKeyboard: !!this.opts.connectHardwareKeyboard,
              isHeadless: !!this.opts.isHeadless,
              devicePreferences: {}
            };

            // add the window center, if it is specified
            if (this.opts.SimulatorWindowCenter) {
              runOpts.devicePreferences.SimulatorWindowCenter = this.opts.SimulatorWindowCenter;
            }

            // This is to workaround XCTest bug about changing Simulator
            // orientation is not synchronized to the actual window orientation
            orientation = _lodash2['default'].isString(this.opts.orientation) && this.opts.orientation.toUpperCase();
            context$2$0.t0 = orientation;
            context$2$0.next = context$2$0.t0 === 'LANDSCAPE' ? 6 : context$2$0.t0 === 'PORTRAIT' ? 9 : 12;
            break;

          case 6:
            runOpts.devicePreferences.SimulatorWindowOrientation = 'LandscapeLeft';
            runOpts.devicePreferences.SimulatorWindowRotationAngle = 90;
            return context$2$0.abrupt('break', 12);

          case 9:
            runOpts.devicePreferences.SimulatorWindowOrientation = 'Portrait';
            runOpts.devicePreferences.SimulatorWindowRotationAngle = 0;
            return context$2$0.abrupt('break', 12);

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.opts.device.run(runOpts));

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSim',
    value: function createSim() {
      var sim;
      return _regeneratorRuntime.async(function createSim$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.lifecycleData.createSim = true;

            // create sim for caps
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.createSim)(this.opts, this.sessionId));

          case 3:
            sim = context$2$0.sent;

            _logger2['default'].info('Created simulator with udid \'' + sim.udid + '\'.');

            return context$2$0.abrupt('return', sim);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launchApp',
    value: function launchApp() {
      var APP_LAUNCH_TIMEOUT, checkStatus, retries;
      return _regeneratorRuntime.async(function launchApp$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            APP_LAUNCH_TIMEOUT = 20 * 1000;

            this.logEvent('appLaunchAttempted');
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.launch)(this.opts.device.udid, this.opts.bundleId));

          case 4:
            checkStatus = function checkStatus() {
              var response, currentApp;
              return _regeneratorRuntime.async(function checkStatus$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.proxyCommand('/status', 'GET'));

                  case 2:
                    response = context$3$0.sent;
                    currentApp = response.currentApp.bundleID;

                    if (!(currentApp !== this.opts.bundleId)) {
                      context$3$0.next = 6;
                      break;
                    }

                    throw new Error(this.opts.bundleId + ' not in foreground. ' + currentApp + ' is in foreground');

                  case 6:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this5);
            };

            _logger2['default'].info('Waiting for \'' + this.opts.bundleId + '\' to be in foreground');
            retries = parseInt(APP_LAUNCH_TIMEOUT / 200, 10);
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 200, checkStatus));

          case 9:
            _logger2['default'].info(this.opts.bundleId + ' is in foreground');
            this.logEvent('appLaunched');

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startWdaSession',
    value: function startWdaSession(bundleId, processArguments) {
      var args, env, shouldWaitForQuiescence, maxTypingFrequency, shouldUseSingletonTestManager, shouldUseTestManagerForVisibilityDetection, desired;
      return _regeneratorRuntime.async(function startWdaSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = processArguments ? processArguments.args : [];
            env = processArguments ? processArguments.env : {};
            shouldWaitForQuiescence = _appiumSupport.util.hasValue(this.opts.waitForQuiescence) ? this.opts.waitForQuiescence : true;
            maxTypingFrequency = _appiumSupport.util.hasValue(this.opts.maxTypingFrequency) ? this.opts.maxTypingFrequency : 60;
            shouldUseSingletonTestManager = _appiumSupport.util.hasValue(this.opts.shouldUseSingletonTestManager) ? this.opts.shouldUseSingletonTestManager : true;
            shouldUseTestManagerForVisibilityDetection = false;

            if (_appiumSupport.util.hasValue(this.opts.simpleIsVisibleCheck)) {
              shouldUseTestManagerForVisibilityDetection = this.opts.simpleIsVisibleCheck;
            }
            if (!isNaN(parseFloat(this.opts.platformVersion)) && parseFloat(this.opts.platformVersion).toFixed(1) === '9.3') {
              _logger2['default'].info('Forcing shouldUseSingletonTestManager capability value to true, because of known XCTest issues under 9.3 platform version');
              shouldUseTestManagerForVisibilityDetection = true;
            }
            if (_appiumSupport.util.hasValue(this.opts.language)) {
              args.push('-AppleLanguages', '(' + this.opts.language + ')');
              args.push('-NSLanguages', '(' + this.opts.language + ')');
            }

            if (_appiumSupport.util.hasValue(this.opts.locale)) {
              args.push('-AppleLocale', this.opts.locale);
            }

            desired = {
              desiredCapabilities: {
                bundleId: bundleId,
                arguments: args,
                environment: env,
                shouldWaitForQuiescence: shouldWaitForQuiescence,
                shouldUseTestManagerForVisibilityDetection: shouldUseTestManagerForVisibilityDetection,
                maxTypingFrequency: maxTypingFrequency,
                shouldUseSingletonTestManager: shouldUseSingletonTestManager
              }
            };
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.proxyCommand('/session', 'POST', desired));

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // Override Proxy methods from BaseDriver
  }, {
    key: 'proxyActive',
    value: function proxyActive() {
      return this.jwpProxyActive;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList() {
      if (this.isWebview()) {
        return NO_PROXY_WEB_LIST;
      }
      return NO_PROXY_NATIVE_LIST;
    }
  }, {
    key: 'canProxy',
    value: function canProxy() {
      return true;
    }
  }, {
    key: 'isSafari',
    value: function isSafari() {
      return !!this.safari;
    }
  }, {
    key: 'isRealDevice',
    value: function isRealDevice() {
      return this.opts.realDevice;
    }
  }, {
    key: 'isSimulator',
    value: function isSimulator() {
      return !this.opts.realDevice;
    }
  }, {
    key: 'isWebview',
    value: function isWebview() {
      return this.isSafari() || this.isWebContext();
    }
  }, {
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'validateLocatorStrategy', this).call(this, strategy, this.isWebContext());
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      // check with the base class, and return if it fails
      var res = _get(Object.getPrototypeOf(XCUITestDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
      if (!res) {
        return res;
      }

      // make sure that the capabilities have one of `app` or `bundleId`
      if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
        var msg = 'The desired capabilities must include either an app or a bundleId for iOS';
        _logger2['default'].errorAndThrow(msg);
      }

      var verifyProcessArgument = function verifyProcessArgument(processArguments) {
        if (!_lodash2['default'].isNil(processArguments.args) && !_lodash2['default'].isArray(processArguments.args)) {
          _logger2['default'].errorAndThrow('processArguments.args must be an array of string');
        }

        if (!_lodash2['default'].isNil(processArguments.env) && !_lodash2['default'].isObject(caps.processArguments.env)) {
          _logger2['default'].errorAndThrow('processArguments.env must be an object <key,value> pair {a:b, c:d}');
        }
      };

      // `processArguments` should be JSON string or an object with arguments and/ environment details
      if (caps.processArguments) {
        if (_lodash2['default'].isString(caps.processArguments)) {
          try {
            // try to parse the string as JSON
            caps.processArguments = JSON.parse(caps.processArguments);
            verifyProcessArgument(caps.processArguments);
          } catch (err) {
            _logger2['default'].errorAndThrow('processArguments must be a json format or an object with format {args : [], env : {a:b, c:d}}. Both environment and argument can be null. Error: ' + err);
          }
        } else if (_lodash2['default'].isObject(caps.processArguments)) {
          verifyProcessArgument(caps.processArguments);
        } else {
          _logger2['default'].errorAndThrow('processArguments must be an object, or a string JSON object with format {args : [], env : {a:b, c:d}}. Both environment and argument can be null.');
        }
      }

      // there is no point in having `keychainPath` without `keychainPassword`
      if (caps.keychainPath && !caps.keychainPassword || !caps.keychainPath && caps.keychainPassword) {
        _logger2['default'].errorAndThrow('If \'keychainPath\' is set, \'keychainPassword\' must also be set (and vice versa).');
      }

      if (caps.autoAcceptAlerts || caps.autoDismissAlerts) {
        _logger2['default'].warn('The capabilities \'autoAcceptAlerts\' and \'autoDismissAlerts\' ' + 'do not work for XCUITest-based tests. Please adjust your ' + 'alert handling accordingly.');
      }

      // `resetOnSessionStartOnly` should be set to true by default
      this.opts.resetOnSessionStartOnly = !_appiumSupport.util.hasValue(this.opts.resetOnSessionStartOnly) || this.opts.resetOnSessionStartOnly;
      this.opts.useNewWDA = _appiumSupport.util.hasValue(this.opts.useNewWDA) ? this.opts.useNewWDA : false;

      // finally, return true since the superclass check passed, as did this
      return true;
    }
  }, {
    key: 'installApp',
    value: function installApp() {
      var pause;
      return _regeneratorRuntime.async(function installApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isSafari()) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return');

          case 2:
            if (!(this.opts.autoLaunch === false)) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return');

          case 4:
            if (!this.isRealDevice()) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _realDeviceManagement.installToRealDevice)(this.opts.device, this.opts.app, this.opts.bundleId, this.opts.noReset));

          case 7:
            context$2$0.next = 11;
            break;

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((0, _simulatorManagement.installToSimulator)(this.opts.device, this.opts.app, this.opts.bundleId, this.opts.noReset));

          case 11:
            if (!_appiumSupport.util.hasValue(this.opts.iosInstallPause)) {
              context$2$0.next = 16;
              break;
            }

            pause = parseInt(this.opts.iosInstallPause, 10);

            _logger2['default'].debug('iosInstallPause set. Pausing ' + pause + ' ms before continuing');
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(pause));

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setInitialOrientation',
    value: function setInitialOrientation(orientation) {
      return _regeneratorRuntime.async(function setInitialOrientation$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_lodash2['default'].isString(orientation)) {
              context$2$0.next = 3;
              break;
            }

            _logger2['default'].info('Skipping setting of the initial display orientation. ' + 'Set the "orientation" capability to either "LANDSCAPE" or "PORTRAIT", if this is an undesired behavior.');
            return context$2$0.abrupt('return');

          case 3:
            orientation = orientation.toUpperCase();

            if (_lodash2['default'].includes(['LANDSCAPE', 'PORTRAIT'], orientation)) {
              context$2$0.next = 7;
              break;
            }

            _logger2['default'].debug('Unable to set initial orientation to \'' + orientation + '\'');
            return context$2$0.abrupt('return');

          case 7:
            _logger2['default'].debug('Setting initial orientation to \'' + orientation + '\'');
            context$2$0.prev = 8;
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.proxyCommand('/orientation', 'POST', { orientation: orientation }));

          case 11:
            this.opts.curOrientation = orientation;
            context$2$0.next = 17;
            break;

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](8);

            _logger2['default'].warn('Setting initial orientation failed with: ' + context$2$0.t0.message);

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[8, 14]]);
    }
  }, {
    key: '_getCommandTimeout',
    value: function _getCommandTimeout(cmdName) {
      this.opts.commandTimeouts = (0, _utils.normalizeCommandTimeouts)(this.opts.commandTimeouts);
      if (this.opts.commandTimeouts) {
        if (cmdName && _lodash2['default'].has(this.opts.commandTimeouts, cmdName)) {
          return this.opts.commandTimeouts[cmdName];
        }
        return this.opts.commandTimeouts[_utils.DEFAULT_TIMEOUT_KEY];
      }
    }

    /**
     * Get session capabilities merged with what WDA reports
     * This is a library command but needs to call 'super' so can't be on
     * a helper object
     */
  }, {
    key: 'getSession',
    value: function getSession() {
      var driverSession, wdaCaps;
      return _regeneratorRuntime.async(function getSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'getSession', this).call(this));

          case 2:
            driverSession = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proxyCommand('/', 'GET'));

          case 5:
            wdaCaps = context$2$0.sent;

            _logger2['default'].info("Merging WDA caps over Appium caps for session detail response");
            return context$2$0.abrupt('return', _Object$assign({ udid: this.opts.udid }, driverSession, wdaCaps.capabilities));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startIWDP',
    value: function startIWDP() {
      return _regeneratorRuntime.async(function startIWDP$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.logEvent('iwdpStarting');
            this.iwdpServer = new _appiumIosDriver.IWDP(this.opts.webkitDebugProxyPort, this.opts.udid);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.iwdpServer.start());

          case 4:
            this.logEvent('iwdpStarted');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopIWDP',
    value: function stopIWDP() {
      return _regeneratorRuntime.async(function stopIWDP$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.iwdpServer) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.iwdpServer.stop());

          case 3:
            delete this.iwdpServer;

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'reset',
    value: function reset() {
      var opts, shutdownHandler;
      return _regeneratorRuntime.async(function reset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.noReset) {
              context$2$0.next = 12;
              break;
            }

            opts = _lodash2['default'].cloneDeep(this.opts);

            opts.noReset = false;
            opts.fullReset = false;
            shutdownHandler = this.resetOnUnexpectedShutdown;

            this.resetOnUnexpectedShutdown = function () {};
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.runReset(opts));

          case 9:
            context$2$0.prev = 9;

            this.resetOnUnexpectedShutdown = shutdownHandler;
            return context$2$0.finish(9);

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(XCUITestDriver.prototype), 'reset', this).call(this));

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6,, 9, 12]]);
    }
  }, {
    key: 'driverData',
    get: function get() {
      // TODO fill out resource info here
      return {};
    }
  }]);

  return XCUITestDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {

  for (var _iterator = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    XCUITestDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

exports['default'] = XCUITestDriver;
exports.XCUITestDriver = XCUITestDriver;

// TODO add validation on caps

// ensure we track useJSONSource capability as a setting as well

// shutdown the simulator so that the ssl cert is recognized

// at this point if there is no platformVersion, get it from the device

// Cleanup of installd cache helps to save disk space while running multiple tests
// without restarting the Simulator: https://github.com/appium/appium/issues/9410

// Retry log capture if Simulator was not running before

// if we only have bundle identifier and no app, fail if it is not already installed

// local helper for the two places we need to uninstall wda and re-start it

// reset the permissions on the derived data folder, if necessary

// TODO: once this fix gets into base driver remove from here

// check for supported build-in apps

// download if necessary

// check for a particular simulator

// make sure it is a connected device. If not, the udid passed in is invalid

// figure out the correct simulator to use, given the desired capabilities

// check for an existing simulator

// Check for existing simulator just with correct capabilities

// if user has passed in desiredCaps.autoLaunch = false
// meaning they will manage app install / launching

// https://github.com/appium/appium/issues/6889

// call super to get event timings, etc...

// This is to make sure reset happens even if noReset is set to true
//# sourceMappingURL=data:application/json;charset=utf8;base64,
