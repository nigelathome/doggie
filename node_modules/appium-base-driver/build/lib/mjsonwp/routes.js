'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

// define the routes, mapping of HTTP methods to particular driver commands,
// and any parameters that are expected in a request
// parameters can be `required` or `optional`
var METHOD_MAP = {
  '/wd/hub/status': {
    GET: { command: 'getStatus' }
  },
  '/wd/hub/session': {
    POST: { command: 'createSession', payloadParams: {
        validate: function validate(jsonObj) {
          return !jsonObj.capabilities && !jsonObj.desiredCapabilities && 'we require one of "desiredCapabilities" or "capabilities" object';
        },
        optional: ['desiredCapabilities', 'requiredCapabilities', 'capabilities'] } }
  },
  '/wd/hub/sessions': {
    GET: { command: 'getSessions' }
  },
  '/wd/hub/session/:sessionId': {
    GET: { command: 'getSession' },
    DELETE: { command: 'deleteSession' }
  },
  '/wd/hub/session/:sessionId/timeouts': {
    GET: { command: 'getTimeouts' }, // W3C route
    POST: { command: 'timeouts', payloadParams: { required: ['type', 'ms'] } }
  },
  '/wd/hub/session/:sessionId/timeouts/async_script': {
    POST: { command: 'asyncScriptTimeout', payloadParams: { required: ['ms'] } }
  },
  '/wd/hub/session/:sessionId/timeouts/implicit_wait': {
    POST: { command: 'implicitWait', payloadParams: { required: ['ms'] } }
  },
  '/wd/hub/session/:sessionId/window_handle': {
    GET: { command: 'getWindowHandle' }
  },
  '/wd/hub/session/:sessionId/window_handles': {
    GET: { command: 'getWindowHandles' }
  },
  '/wd/hub/session/:sessionId/url': {
    GET: { command: 'getUrl' },
    POST: { command: 'setUrl', payloadParams: { required: ['url'] } }
  },
  '/wd/hub/session/:sessionId/forward': {
    POST: { command: 'forward' }
  },
  '/wd/hub/session/:sessionId/back': {
    POST: { command: 'back' }
  },
  '/wd/hub/session/:sessionId/refresh': {
    POST: { command: 'refresh' }
  },
  '/wd/hub/session/:sessionId/execute': {
    POST: { command: 'execute', payloadParams: { required: ['script', 'args'] } }
  },
  '/wd/hub/session/:sessionId/execute_async': {
    POST: { command: 'executeAsync', payloadParams: { required: ['script', 'args'] } }
  },
  '/wd/hub/session/:sessionId/screenshot': {
    GET: { command: 'getScreenshot' }
  },
  '/wd/hub/session/:sessionId/ime/available_engines': {
    GET: { command: 'availableIMEEngines' }
  },
  '/wd/hub/session/:sessionId/ime/active_engine': {
    GET: { command: 'getActiveIMEEngine' }
  },
  '/wd/hub/session/:sessionId/ime/activated': {
    GET: { command: 'isIMEActivated' }
  },
  '/wd/hub/session/:sessionId/ime/deactivate': {
    POST: { command: 'deactivateIMEEngine' }
  },
  '/wd/hub/session/:sessionId/ime/activate': {
    POST: { command: 'activateIMEEngine', payloadParams: { required: ['engine'] } }
  },
  '/wd/hub/session/:sessionId/frame': {
    POST: { command: 'setFrame', payloadParams: { required: ['id'] } }
  },
  '/wd/hub/session/:sessionId/frame/parent': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/window': {
    GET: { command: 'getWindowHandle' },
    POST: { command: 'setWindow', payloadParams: { required: ['name'] } },
    DELETE: { command: 'closeWindow' }
  },
  '/wd/hub/session/:sessionId/window/:windowhandle/size': {
    GET: { command: 'getWindowSize' },
    POST: {}
  },
  '/wd/hub/session/:sessionId/window/:windowhandle/position': {
    POST: {},
    GET: {}
  },
  '/wd/hub/session/:sessionId/window/:windowhandle/maximize': {
    POST: { command: 'maximizeWindow' }
  },
  '/wd/hub/session/:sessionId/cookie': {
    GET: { command: 'getCookies' },
    POST: { command: 'setCookie', payloadParams: { required: ['cookie'] } },
    DELETE: { command: 'deleteCookies' }
  },
  '/wd/hub/session/:sessionId/cookie/:name': {
    GET: { command: 'getCookie' },
    DELETE: { command: 'deleteCookie' }
  },
  '/wd/hub/session/:sessionId/source': {
    GET: { command: 'getPageSource' }
  },
  '/wd/hub/session/:sessionId/quick_source': {
    GET: { command: 'getPageQuickSource' }
  },
  '/wd/hub/session/:sessionId/title': {
    GET: { command: 'title' }
  },
  '/wd/hub/session/:sessionId/element': {
    POST: { command: 'findElement', payloadParams: { required: ['using', 'value'] } }
  },
  '/wd/hub/session/:sessionId/elements': {
    POST: { command: 'findElements', payloadParams: { required: ['using', 'value'] } }
  },
  '/wd/hub/session/:sessionId/element/active': {
    POST: { command: 'active' }
  },
  '/wd/hub/session/:sessionId/element/:elementId': {
    GET: {}
  },
  '/wd/hub/session/:sessionId/element/:elementId/element': {
    POST: { command: 'findElementFromElement', payloadParams: { required: ['using', 'value'] } }
  },
  '/wd/hub/session/:sessionId/element/:elementId/elements': {
    POST: { command: 'findElementsFromElement', payloadParams: { required: ['using', 'value'] } }
  },
  '/wd/hub/session/:sessionId/element/:elementId/click': {
    POST: { command: 'click' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/submit': {
    POST: { command: 'submit' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/text': {
    GET: { command: 'getText' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/value': {
    POST: { command: 'setValue', payloadParams: {
        validate: function validate(jsonObj) {
          return !jsonObj.value && !jsonObj.text && 'we require one of "text" or "value" params';
        },
        optional: ['value', 'text'],
        makeArgs: function makeArgs(jsonObj) {
          // override the default argument constructor because of the special
          // logic here. Basically we want to accept either a value (old JSONWP)
          // or a text (new W3C) parameter, but only send one of them to the
          // command (not both). Prefer 'value' since it's more
          // backward-compatible.
          return [jsonObj.value || jsonObj.text];
        }
      } }
  },
  '/wd/hub/session/:sessionId/keys': {
    POST: { command: 'keys', payloadParams: { required: ['value'] } }
  },
  '/wd/hub/session/:sessionId/element/:elementId/name': {
    GET: { command: 'getName' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/clear': {
    POST: { command: 'clear' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/selected': {
    GET: { command: 'elementSelected' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/enabled': {
    GET: { command: 'elementEnabled' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/attribute/:name': {
    GET: { command: 'getAttribute' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/equals/:otherId': {
    GET: { command: 'equalsElement' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/displayed': {
    GET: { command: 'elementDisplayed' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/location': {
    GET: { command: 'getLocation' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/location_in_view': {
    GET: { command: 'getLocationInView' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/size': {
    GET: { command: 'getSize' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/css/:propertyName': {
    GET: { command: 'getCssProperty' }
  },
  '/wd/hub/session/:sessionId/orientation': {
    GET: { command: 'getOrientation' },
    POST: { command: 'setOrientation', payloadParams: { required: ['orientation'] } }
  },
  '/wd/hub/session/:sessionId/rotation': {
    GET: { command: 'getRotation' },
    POST: { command: 'setRotation', payloadParams: { required: ['x', 'y', 'z'] } }
  },
  '/wd/hub/session/:sessionId/moveto': {
    POST: { command: 'moveTo', payloadParams: { optional: ['element', 'xoffset', 'yoffset'] } }
  },
  '/wd/hub/session/:sessionId/click': {
    POST: { command: 'clickCurrent', payloadParams: { optional: ['button'] } }
  },
  '/wd/hub/session/:sessionId/buttondown': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/buttonup': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/doubleclick': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/touch/click': {
    POST: { command: 'click', payloadParams: { required: ['element'] } }
  },
  '/wd/hub/session/:sessionId/touch/down': {
    POST: { command: 'touchDown', payloadParams: { required: ['x', 'y'] } }
  },
  '/wd/hub/session/:sessionId/touch/up': {
    POST: { command: 'touchUp', payloadParams: { required: ['x', 'y'] } }
  },
  '/wd/hub/session/:sessionId/touch/move': {
    POST: { command: 'touchMove', payloadParams: { required: ['x', 'y'] } }
  },
  '/wd/hub/session/:sessionId/touch/scroll': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/touch/doubleclick': {
    POST: {}
  },
  '/wd/hub/session/:sessionId/actions': {
    POST: { command: 'performActions', payloadParams: { required: ['actions'] } }
  },
  '/wd/hub/session/:sessionId/touch/longclick': {
    POST: { command: 'touchLongClick', payloadParams: { required: ['elements'] } }
  },
  '/wd/hub/session/:sessionId/touch/flick': {
    POST: { command: 'flick', payloadParams: { optional: ['element', 'xspeed', 'yspeed', 'xoffset', 'yoffset', 'speed'] } }
  },
  '/wd/hub/session/:sessionId/location': {
    GET: { command: 'getGeoLocation' },
    POST: { command: 'setGeoLocation', payloadParams: { required: ['location'] } }
  },
  '/wd/hub/session/:sessionId/local_storage': {
    GET: {},
    POST: {},
    DELETE: {}
  },
  '/wd/hub/session/:sessionId/local_storage/key/:key': {
    GET: {},
    DELETE: {}
  },
  '/wd/hub/session/:sessionId/local_storage/size': {
    GET: {}
  },
  '/wd/hub/session/:sessionId/session_storage': {
    GET: {},
    POST: {},
    DELETE: {}
  },
  '/wd/hub/session/:sessionId/session_storage/key/:key': {
    GET: {},
    DELETE: {}
  },
  '/wd/hub/session/:sessionId/session_storage/size': {
    GET: {}
  },
  '/wd/hub/session/:sessionId/log': {
    POST: { command: 'getLog', payloadParams: { required: ['type'] } }
  },
  '/wd/hub/session/:sessionId/log/types': {
    GET: { command: 'getLogTypes' }
  },
  '/wd/hub/session/:sessionId/application_cache/status': {
    GET: {}
  },

  //
  // mjsonwire
  //
  '/wd/hub/session/:sessionId/context': {
    GET: { command: 'getCurrentContext' },
    POST: { command: 'setContext', payloadParams: { required: ['name'] } }
  },
  '/wd/hub/session/:sessionId/contexts': {
    GET: { command: 'getContexts' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/pageIndex': {
    GET: { command: 'getPageIndex' }
  },
  '/wd/hub/session/:sessionId/network_connection': {
    GET: { command: 'getNetworkConnection' },
    POST: { command: 'setNetworkConnection', payloadParams: { unwrap: 'parameters', required: ['type'] } }
  },
  '/wd/hub/session/:sessionId/touch/perform': {
    POST: { command: 'performTouch', payloadParams: { wrap: 'actions', required: ['actions'] } }
  },
  '/wd/hub/session/:sessionId/touch/multi/perform': {
    POST: { command: 'performMultiAction', payloadParams: { required: ['actions'], optional: ['elementId'] } }
  },
  '/wd/hub/session/:sessionId/receive_async_response': {
    POST: { command: 'receiveAsyncResponse', payloadParams: { required: ['status', 'value'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/shake': {
    POST: { command: 'mobileShake' }
  },
  '/wd/hub/session/:sessionId/appium/device/system_time': {
    GET: { command: 'getDeviceTime' }
  },
  '/wd/hub/session/:sessionId/appium/device/lock': {
    POST: { command: 'lock', payloadParams: { optional: ['seconds'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/unlock': {
    POST: { command: 'unlock' }
  },
  '/wd/hub/session/:sessionId/appium/device/is_locked': {
    POST: { command: 'isLocked' }
  },
  '/wd/hub/session/:sessionId/appium/start_recording_screen': {
    POST: { command: 'startRecordingScreen', payloadParams: { required: ['filePath', 'videoSize', 'timeLimit', 'bitRate'] } }
  },
  '/wd/hub/session/:sessionId/appium/stop_recording_screen': {
    POST: { command: 'stopRecordingScreen' }
  },
  '/wd/hub/session/:sessionId/appium/performanceData/types': {
    POST: { command: 'getPerformanceDataTypes' }
  },
  '/wd/hub/session/:sessionId/appium/getPerformanceData': {
    POST: { command: 'getPerformanceData', payloadParams: { required: ['packageName', 'dataType'], optional: ['dataReadTimeout'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/press_keycode': {
    POST: { command: 'pressKeyCode', payloadParams: { required: ['keycode'], optional: ['metastate'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/long_press_keycode': {
    POST: { command: 'longPressKeyCode', payloadParams: { required: ['keycode'], optional: ['metastate'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/finger_print': {
    POST: { command: 'fingerprint', payloadParams: { required: ['fingerprintId'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/send_sms': {
    POST: { command: 'sendSMS', payloadParams: { required: ['phoneNumber', 'message'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/gsm_call': {
    POST: { command: 'gsmCall', payloadParams: { required: ['phoneNumber', 'action'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/gsm_signal': {
    POST: { command: 'gsmSignal', payloadParams: { required: ['signalStrengh'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/gsm_voice': {
    POST: { command: 'gsmVoice', payloadParams: { required: ['state'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/power_capacity': {
    POST: { command: 'powerCapacity', payloadParams: { required: ['percent'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/power_ac': {
    POST: { command: 'powerAC', payloadParams: { required: ['state'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/network_speed': {
    POST: { command: 'networkSpeed', payloadParams: { required: ['netspeed'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/keyevent': {
    POST: { command: 'keyevent', payloadParams: { required: ['keycode'], optional: ['metastate'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/rotate': {
    POST: { command: 'mobileRotation', payloadParams: {
        required: ['x', 'y', 'radius', 'rotation', 'touchCount', 'duration'],
        optional: ['element'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/current_activity': {
    GET: { command: 'getCurrentActivity' }
  },
  '/wd/hub/session/:sessionId/appium/device/current_package': {
    GET: { command: 'getCurrentPackage' }
  },
  '/wd/hub/session/:sessionId/appium/device/install_app': {
    POST: { command: 'installApp', payloadParams: { required: ['appPath'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/remove_app': {
    POST: { command: 'removeApp', payloadParams: { required: [['appId'], ['bundleId']] } }
  },
  '/wd/hub/session/:sessionId/appium/device/app_installed': {
    POST: { command: 'isAppInstalled', payloadParams: { required: ['bundleId'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/hide_keyboard': {
    POST: { command: 'hideKeyboard', payloadParams: { optional: ['strategy', 'key', 'keyCode', 'keyName'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/is_keyboard_shown': {
    GET: { command: 'isKeyboardShown' }
  },
  '/wd/hub/session/:sessionId/appium/device/push_file': {
    POST: { command: 'pushFile', payloadParams: { required: ['path', 'data'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/pull_file': {
    POST: { command: 'pullFile', payloadParams: { required: ['path'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/pull_folder': {
    POST: { command: 'pullFolder', payloadParams: { required: ['path'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/toggle_airplane_mode': {
    POST: { command: 'toggleFlightMode' }
  },
  '/wd/hub/session/:sessionId/appium/device/toggle_data': {
    POST: { command: 'toggleData' }
  },
  '/wd/hub/session/:sessionId/appium/device/toggle_wifi': {
    POST: { command: 'toggleWiFi' }
  },
  '/wd/hub/session/:sessionId/appium/device/toggle_location_services': {
    POST: { command: 'toggleLocationServices' }
  },
  '/wd/hub/session/:sessionId/appium/device/open_notifications': {
    POST: { command: 'openNotifications' }
  },
  '/wd/hub/session/:sessionId/appium/device/start_activity': {
    POST: { command: 'startActivity', payloadParams: { required: ['appPackage', 'appActivity'],
        optional: ['appWaitPackage', 'appWaitActivity', 'intentAction', 'intentCategory', 'intentFlags', 'optionalIntentArguments', 'dontStopAppOnReset'] } }
  },
  '/wd/hub/session/:sessionId/appium/device/system_bars': {
    GET: { command: 'getSystemBars' }
  },
  '/wd/hub/session/:sessionId/appium/device/display_density': {
    GET: { command: 'getDisplayDensity' }
  },
  '/wd/hub/session/:sessionId/appium/simulator/touch_id': {
    POST: { command: 'touchId', payloadParams: { required: ['match'] } }
  },
  '/wd/hub/session/:sessionId/appium/simulator/toggle_touch_id_enrollment': {
    POST: { command: 'toggleEnrollTouchId', payloadParams: { optional: ['enabled'] } }
  },
  '/wd/hub/session/:sessionId/appium/app/launch': {
    POST: { command: 'launchApp' }
  },
  '/wd/hub/session/:sessionId/appium/app/close': {
    POST: { command: 'closeApp' }
  },
  '/wd/hub/session/:sessionId/appium/app/reset': {
    POST: { command: 'reset' }
  },
  '/wd/hub/session/:sessionId/appium/app/background': {
    POST: { command: 'background', payloadParams: { required: ['seconds'] } }
  },
  '/wd/hub/session/:sessionId/appium/app/end_test_coverage': {
    POST: { command: 'endCoverage', payloadParams: { required: ['intent', 'path'] } }
  },
  '/wd/hub/session/:sessionId/appium/app/strings': {
    POST: { command: 'getStrings', payloadParams: { optional: ['language', 'stringFile'] } }
  },
  '/wd/hub/session/:sessionId/appium/element/:elementId/value': {
    POST: { command: 'setValueImmediate', payloadParams: { required: ['value'] } }
  },
  '/wd/hub/session/:sessionId/appium/element/:elementId/replace_value': {
    POST: { command: 'replaceValue', payloadParams: { required: ['value'] } }
  },
  '/wd/hub/session/:sessionId/appium/settings': {
    POST: { command: 'updateSettings', payloadParams: { required: ['settings'] } },
    GET: { command: 'getSettings' }
  },
  '/wd/hub/session/:sessionId/appium/receive_async_response': {
    POST: { command: 'receiveAsyncResponse', payloadParams: { required: ['response'] } }
  },

  /*
   * The W3C spec has some changes to the wire protocol.
   * https://w3c.github.io/webdriver/webdriver-spec.html
   * Begin to add those changes here, keeping the old version
   * since clients still implement them.
   */
  // old alerts
  '/wd/hub/session/:sessionId/alert_text': {
    GET: { command: 'getAlertText' },
    POST: { command: 'setAlertText', payloadParams: { required: ['text'] } }
  },
  '/wd/hub/session/:sessionId/accept_alert': {
    POST: { command: 'postAcceptAlert' }
  },
  '/wd/hub/session/:sessionId/dismiss_alert': {
    POST: { command: 'postDismissAlert' }
  },
  // https://w3c.github.io/webdriver/webdriver-spec.html#user-prompts
  '/wd/hub/session/:sessionId/alert/text': {
    GET: { command: 'getAlertText' },
    POST: { command: 'setAlertText', payloadParams: { required: ['text'] } }
  },
  '/wd/hub/session/:sessionId/alert/accept': {
    POST: { command: 'postAcceptAlert' }
  },
  '/wd/hub/session/:sessionId/alert/dismiss': {
    POST: { command: 'postDismissAlert' }
  },
  // https://w3c.github.io/webdriver/webdriver-spec.html#get-element-rect
  '/wd/hub/session/:sessionId/element/:elementId/rect': {
    GET: { command: 'getElementRect' }
  },
  '/wd/hub/session/:sessionId/window/handles': {
    GET: { command: 'getWindowHandles' }
  },
  '/wd/hub/session/:sessionId/execute/sync': {
    POST: { command: 'execute', payloadParams: { required: ['script', 'args'] } }
  },
  '/wd/hub/session/:sessionId/execute/async': {
    POST: { command: 'executeAsync', payloadParams: { required: ['script', 'args'] } }
  },
  // Pre-W3C endpoint for element screenshot
  '/wd/hub/session/:sessionId/screenshot/:elementId': {
    GET: { command: 'getElementScreenshot' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/screenshot': {
    GET: { command: 'getElementScreenshot' }
  },
  '/wd/hub/session/:sessionId/window/rect': {
    GET: { command: 'getWindowRect' },
    POST: { command: 'setWindowRect' }
  },
  '/wd/hub/session/:sessionId/window/maximize': {
    POST: { command: 'maximizeWindow' }
  },
  '/wd/hub/session/:sessionId/window/minimize': {
    POST: { command: 'minimizeWindow' }
  },
  '/wd/hub/session/:sessionId/window/fullscreen': {
    POST: { command: 'fullScreenWindow' }
  },
  '/wd/hub/session/:sessionId/element/:elementId/property/:name': {
    GET: { command: 'getProperty' }
  }
};

// driver command names
var ALL_COMMANDS = [];
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].values(METHOD_MAP)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var v = _step.value;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _getIterator(_lodash2['default'].values(v)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var m = _step3.value;

        if (m.command) {
          ALL_COMMANDS.push(m.command);
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var RE_ESCAPE = /[\-\[\]{}()+?.,\\\^$|#\s]/g;
var RE_PARAM = /([:*])(\w+)/g;

var Route = (function () {
  function Route(route) {
    var _this = this;

    _classCallCheck(this, Route);

    this.paramNames = [];

    var reStr = route.replace(RE_ESCAPE, "\\$&");
    reStr = reStr.replace(RE_PARAM, function (_, mode, name) {
      _this.paramNames.push(name);
      return mode === ":" ? "([^/]*)" : "(.*)";
    });
    this.routeRegexp = new RegExp('^' + reStr + '$');
  }

  _createClass(Route, [{
    key: 'parse',
    value: function parse(url) {
      var matches = url.match(this.routeRegexp);
      if (!matches) return; // eslint-disable-line curly
      var i = 0;
      var params = {};
      while (i < this.paramNames.length) {
        var paramName = this.paramNames[i++];
        params[paramName] = matches[i];
      }
      return params;
    }
  }]);

  return Route;
})();

function routeToCommandName(endpoint, method) {
  var dstRoute = null;
  var actualEndpoint = _lodash2['default'].startsWith(endpoint, '/') ? endpoint : '/' + endpoint;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(_lodash2['default'].keys(METHOD_MAP)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var currentRoute = _step2.value;

      var route = new Route(currentRoute);
      // we don't care about the actual session id for matching
      if (route.parse('/wd/hub/session/ignored-session-id' + actualEndpoint) || route.parse('/wd/hub' + actualEndpoint) || route.parse(actualEndpoint)) {
        dstRoute = currentRoute;
        break;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (!dstRoute) return; // eslint-disable-line curly

  var methods = _lodash2['default'].get(METHOD_MAP, dstRoute);
  if (_lodash2['default'].has(methods, method)) {
    var dstMethod = _lodash2['default'].get(methods, method);
    if (dstMethod.command) {
      return dstMethod.command;
    }
  }
}

// driver commands that do not require a session to already exist
var NO_SESSION_ID_COMMANDS = ['createSession', 'getStatus', 'getSessions'];

exports.METHOD_MAP = METHOD_MAP;
exports.ALL_COMMANDS = ALL_COMMANDS;
exports.NO_SESSION_ID_COMMANDS = NO_SESSION_ID_COMMANDS;
exports.routeToCommandName = routeToCommandName;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQztBQUM1QyxNQUFJLG9CQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDMUIsUUFBTSxTQUFTLEdBQUcsb0JBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN6QyxRQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUU7QUFDckIsYUFBTyxTQUFTLENBQUMsT0FBTyxDQUFDO0tBQzFCO0dBQ0Y7Q0FDRjs7O0FBR0QsSUFBTSxzQkFBc0IsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7O1FBRXBFLFVBQVUsR0FBVixVQUFVO1FBQUUsWUFBWSxHQUFaLFlBQVk7UUFBRSxzQkFBc0IsR0FBdEIsc0JBQXNCO1FBQUUsa0JBQWtCLEdBQWxCLGtCQUFrQiIsImZpbGUiOiJsaWIvbWpzb253cC9yb3V0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbi8vIGRlZmluZSB0aGUgcm91dGVzLCBtYXBwaW5nIG9mIEhUVFAgbWV0aG9kcyB0byBwYXJ0aWN1bGFyIGRyaXZlciBjb21tYW5kcyxcbi8vIGFuZCBhbnkgcGFyYW1ldGVycyB0aGF0IGFyZSBleHBlY3RlZCBpbiBhIHJlcXVlc3Rcbi8vIHBhcmFtZXRlcnMgY2FuIGJlIGByZXF1aXJlZGAgb3IgYG9wdGlvbmFsYFxuY29uc3QgTUVUSE9EX01BUCA9IHtcbiAgJy93ZC9odWIvc3RhdHVzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRTdGF0dXMnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnY3JlYXRlU2Vzc2lvbicsIHBheWxvYWRQYXJhbXM6IHtcbiAgICAgIHZhbGlkYXRlOiAoanNvbk9iaikgPT4gKCFqc29uT2JqLmNhcGFiaWxpdGllcyAmJiAhanNvbk9iai5kZXNpcmVkQ2FwYWJpbGl0aWVzKSAmJiAnd2UgcmVxdWlyZSBvbmUgb2YgXCJkZXNpcmVkQ2FwYWJpbGl0aWVzXCIgb3IgXCJjYXBhYmlsaXRpZXNcIiBvYmplY3QnLFxuICAgICAgb3B0aW9uYWw6IFsnZGVzaXJlZENhcGFiaWxpdGllcycsICdyZXF1aXJlZENhcGFiaWxpdGllcycsICdjYXBhYmlsaXRpZXMnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb25zJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRTZXNzaW9ucyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0U2Vzc2lvbid9LFxuICAgIERFTEVURToge2NvbW1hbmQ6ICdkZWxldGVTZXNzaW9uJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RpbWVvdXRzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRUaW1lb3V0cyd9LCAvLyBXM0Mgcm91dGVcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RpbWVvdXRzJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3R5cGUnLCAnbXMnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90aW1lb3V0cy9hc3luY19zY3JpcHQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdhc3luY1NjcmlwdFRpbWVvdXQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnbXMnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90aW1lb3V0cy9pbXBsaWNpdF93YWl0Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnaW1wbGljaXRXYWl0JywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ21zJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvd2luZG93X2hhbmRsZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0V2luZG93SGFuZGxlJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3dpbmRvd19oYW5kbGVzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRXaW5kb3dIYW5kbGVzJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3VybCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0VXJsJ30sXG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZXRVcmwnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsndXJsJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZm9yd2FyZCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2ZvcndhcmQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYmFjayc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2JhY2snfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvcmVmcmVzaCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3JlZnJlc2gnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZXhlY3V0ZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2V4ZWN1dGUnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc2NyaXB0JywgJ2FyZ3MnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9leGVjdXRlX2FzeW5jJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZXhlY3V0ZUFzeW5jJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3NjcmlwdCcsICdhcmdzJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvc2NyZWVuc2hvdCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0U2NyZWVuc2hvdCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9pbWUvYXZhaWxhYmxlX2VuZ2luZXMnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2F2YWlsYWJsZUlNRUVuZ2luZXMnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvaW1lL2FjdGl2ZV9lbmdpbmUnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldEFjdGl2ZUlNRUVuZ2luZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9pbWUvYWN0aXZhdGVkJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdpc0lNRUFjdGl2YXRlZCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9pbWUvZGVhY3RpdmF0ZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2RlYWN0aXZhdGVJTUVFbmdpbmUnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvaW1lL2FjdGl2YXRlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnYWN0aXZhdGVJTUVFbmdpbmUnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnZW5naW5lJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZnJhbWUnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZXRGcmFtZScsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydpZCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2ZyYW1lL3BhcmVudCc6IHtcbiAgICBQT1NUOiB7fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvd2luZG93Jzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRXaW5kb3dIYW5kbGUnfSxcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3NldFdpbmRvdycsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWyduYW1lJ119fSxcbiAgICBERUxFVEU6IHtjb21tYW5kOiAnY2xvc2VXaW5kb3cnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvd2luZG93Lzp3aW5kb3doYW5kbGUvc2l6ZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0V2luZG93U2l6ZSd9LFxuICAgIFBPU1Q6IHt9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC93aW5kb3cvOndpbmRvd2hhbmRsZS9wb3NpdGlvbic6IHtcbiAgICBQT1NUOiB7fSxcbiAgICBHRVQ6IHt9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC93aW5kb3cvOndpbmRvd2hhbmRsZS9tYXhpbWl6ZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ21heGltaXplV2luZG93J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2Nvb2tpZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0Q29va2llcyd9LFxuICAgIFBPU1Q6IHtjb21tYW5kOiAnc2V0Q29va2llJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2Nvb2tpZSddfX0sXG4gICAgREVMRVRFOiB7Y29tbWFuZDogJ2RlbGV0ZUNvb2tpZXMnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvY29va2llLzpuYW1lJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRDb29raWUnfSxcbiAgICBERUxFVEU6IHtjb21tYW5kOiAnZGVsZXRlQ29va2llJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3NvdXJjZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0UGFnZVNvdXJjZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9xdWlja19zb3VyY2UnOiB7XG4gICAgR0VUOiB7IGNvbW1hbmQ6ICdnZXRQYWdlUXVpY2tTb3VyY2UnIH1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RpdGxlJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICd0aXRsZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZmluZEVsZW1lbnQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsndXNpbmcnLCAndmFsdWUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50cyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2ZpbmRFbGVtZW50cycsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWyd1c2luZycsICd2YWx1ZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvYWN0aXZlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnYWN0aXZlJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZCc6IHtcbiAgICBHRVQ6IHt9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvZWxlbWVudCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2ZpbmRFbGVtZW50RnJvbUVsZW1lbnQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsndXNpbmcnLCAndmFsdWUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvZWxlbWVudHMnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdmaW5kRWxlbWVudHNGcm9tRWxlbWVudCcsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWyd1c2luZycsICd2YWx1ZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZC9jbGljayc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2NsaWNrJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZC9zdWJtaXQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzdWJtaXQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL3RleHQnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldFRleHQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL3ZhbHVlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnc2V0VmFsdWUnLCBwYXlsb2FkUGFyYW1zOiB7XG4gICAgICB2YWxpZGF0ZTogKGpzb25PYmopID0+IHtcbiAgICAgICAgcmV0dXJuICghanNvbk9iai52YWx1ZSAmJiAhanNvbk9iai50ZXh0KSAmJlxuICAgICAgICAgICd3ZSByZXF1aXJlIG9uZSBvZiBcInRleHRcIiBvciBcInZhbHVlXCIgcGFyYW1zJztcbiAgICAgIH0sXG4gICAgICBvcHRpb25hbDogWyd2YWx1ZScsICd0ZXh0J10sXG4gICAgICBtYWtlQXJnczogKGpzb25PYmopID0+IHtcbiAgICAgICAgLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYXJndW1lbnQgY29uc3RydWN0b3IgYmVjYXVzZSBvZiB0aGUgc3BlY2lhbFxuICAgICAgICAvLyBsb2dpYyBoZXJlLiBCYXNpY2FsbHkgd2Ugd2FudCB0byBhY2NlcHQgZWl0aGVyIGEgdmFsdWUgKG9sZCBKU09OV1ApXG4gICAgICAgIC8vIG9yIGEgdGV4dCAobmV3IFczQykgcGFyYW1ldGVyLCBidXQgb25seSBzZW5kIG9uZSBvZiB0aGVtIHRvIHRoZVxuICAgICAgICAvLyBjb21tYW5kIChub3QgYm90aCkuIFByZWZlciAndmFsdWUnIHNpbmNlIGl0J3MgbW9yZVxuICAgICAgICAvLyBiYWNrd2FyZC1jb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gW2pzb25PYmoudmFsdWUgfHwganNvbk9iai50ZXh0XTtcbiAgICAgIH1cbiAgICB9fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQva2V5cyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2tleXMnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsndmFsdWUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvbmFtZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0TmFtZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvY2xlYXInOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdjbGVhcid9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvc2VsZWN0ZWQnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2VsZW1lbnRTZWxlY3RlZCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvZW5hYmxlZCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZWxlbWVudEVuYWJsZWQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL2F0dHJpYnV0ZS86bmFtZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0QXR0cmlidXRlJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZC9lcXVhbHMvOm90aGVySWQnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2VxdWFsc0VsZW1lbnQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL2Rpc3BsYXllZCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZWxlbWVudERpc3BsYXllZCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvbG9jYXRpb24nOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldExvY2F0aW9uJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZC9sb2NhdGlvbl9pbl92aWV3Jzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRMb2NhdGlvbkluVmlldyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvc2l6ZSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0U2l6ZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvY3NzLzpwcm9wZXJ0eU5hbWUnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldENzc1Byb3BlcnR5J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL29yaWVudGF0aW9uJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRPcmllbnRhdGlvbid9LFxuICAgIFBPU1Q6IHtjb21tYW5kOiAnc2V0T3JpZW50YXRpb24nLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnb3JpZW50YXRpb24nXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9yb3RhdGlvbic6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0Um90YXRpb24nfSxcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3NldFJvdGF0aW9uJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3gnLCAneScsICd6J119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvbW92ZXRvJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnbW92ZVRvJywgcGF5bG9hZFBhcmFtczoge29wdGlvbmFsOiBbJ2VsZW1lbnQnLCAneG9mZnNldCcsICd5b2Zmc2V0J119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvY2xpY2snOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdjbGlja0N1cnJlbnQnLCBwYXlsb2FkUGFyYW1zOiB7b3B0aW9uYWw6IFsnYnV0dG9uJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYnV0dG9uZG93bic6IHtcbiAgICBQT1NUOiB7fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYnV0dG9udXAnOiB7XG4gICAgUE9TVDoge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2RvdWJsZWNsaWNrJzoge1xuICAgIFBPU1Q6IHt9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90b3VjaC9jbGljayc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2NsaWNrJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2VsZW1lbnQnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90b3VjaC9kb3duJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAndG91Y2hEb3duJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3gnLCAneSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RvdWNoL3VwJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAndG91Y2hVcCcsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWyd4JywgJ3knXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90b3VjaC9tb3ZlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAndG91Y2hNb3ZlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3gnLCAneSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RvdWNoL3Njcm9sbCc6IHtcbiAgICBQT1NUOiB7fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvdG91Y2gvZG91YmxlY2xpY2snOiB7XG4gICAgUE9TVDoge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FjdGlvbnMnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdwZXJmb3JtQWN0aW9ucycsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydhY3Rpb25zJ119fSxcbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RvdWNoL2xvbmdjbGljayc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RvdWNoTG9uZ0NsaWNrJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2VsZW1lbnRzJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvdG91Y2gvZmxpY2snOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdmbGljaycsIHBheWxvYWRQYXJhbXM6IHtvcHRpb25hbDogWydlbGVtZW50JywgJ3hzcGVlZCcsICd5c3BlZWQnLCAneG9mZnNldCcsICd5b2Zmc2V0JywgJ3NwZWVkJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvbG9jYXRpb24nOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldEdlb0xvY2F0aW9uJ30sXG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZXRHZW9Mb2NhdGlvbicsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydsb2NhdGlvbiddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2xvY2FsX3N0b3JhZ2UnOiB7XG4gICAgR0VUOiB7fSxcbiAgICBQT1NUOiB7fSxcbiAgICBERUxFVEU6IHt9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9sb2NhbF9zdG9yYWdlL2tleS86a2V5Jzoge1xuICAgIEdFVDoge30sXG4gICAgREVMRVRFOiB7fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvbG9jYWxfc3RvcmFnZS9zaXplJzoge1xuICAgIEdFVDoge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3Nlc3Npb25fc3RvcmFnZSc6IHtcbiAgICBHRVQ6IHt9LFxuICAgIFBPU1Q6IHt9LFxuICAgIERFTEVURToge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3Nlc3Npb25fc3RvcmFnZS9rZXkvOmtleSc6IHtcbiAgICBHRVQ6IHt9LFxuICAgIERFTEVURToge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3Nlc3Npb25fc3RvcmFnZS9zaXplJzoge1xuICAgIEdFVDoge31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2xvZyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2dldExvZycsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWyd0eXBlJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvbG9nL3R5cGVzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRMb2dUeXBlcyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBsaWNhdGlvbl9jYWNoZS9zdGF0dXMnOiB7XG4gICAgR0VUOiB7fVxuICB9LFxuXG4gIC8vXG4gIC8vIG1qc29ud2lyZVxuICAvL1xuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvY29udGV4dCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0Q3VycmVudENvbnRleHQnfSxcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3NldENvbnRleHQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnbmFtZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2NvbnRleHRzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRDb250ZXh0cyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvcGFnZUluZGV4Jzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRQYWdlSW5kZXgnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvbmV0d29ya19jb25uZWN0aW9uJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXROZXR3b3JrQ29ubmVjdGlvbid9LFxuICAgIFBPU1Q6IHtjb21tYW5kOiAnc2V0TmV0d29ya0Nvbm5lY3Rpb24nLCBwYXlsb2FkUGFyYW1zOiB7dW53cmFwOiAncGFyYW1ldGVycycsIHJlcXVpcmVkOiBbJ3R5cGUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90b3VjaC9wZXJmb3JtJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncGVyZm9ybVRvdWNoJywgcGF5bG9hZFBhcmFtczoge3dyYXA6ICdhY3Rpb25zJywgcmVxdWlyZWQ6IFsnYWN0aW9ucyddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3RvdWNoL211bHRpL3BlcmZvcm0nOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdwZXJmb3JtTXVsdGlBY3Rpb24nLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnYWN0aW9ucyddLCBvcHRpb25hbDogWydlbGVtZW50SWQnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9yZWNlaXZlX2FzeW5jX3Jlc3BvbnNlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncmVjZWl2ZUFzeW5jUmVzcG9uc2UnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc3RhdHVzJywgJ3ZhbHVlJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9zaGFrZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ21vYmlsZVNoYWtlJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2Uvc3lzdGVtX3RpbWUnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldERldmljZVRpbWUnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9sb2NrJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnbG9jaycsIHBheWxvYWRQYXJhbXM6IHtvcHRpb25hbDogWydzZWNvbmRzJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS91bmxvY2snOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICd1bmxvY2snfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9pc19sb2NrZWQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdpc0xvY2tlZCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vc3RhcnRfcmVjb3JkaW5nX3NjcmVlbic6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3N0YXJ0UmVjb3JkaW5nU2NyZWVuJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2ZpbGVQYXRoJywgJ3ZpZGVvU2l6ZScsICd0aW1lTGltaXQnLCAnYml0UmF0ZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9zdG9wX3JlY29yZGluZ19zY3JlZW4nOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzdG9wUmVjb3JkaW5nU2NyZWVuJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9wZXJmb3JtYW5jZURhdGEvdHlwZXMnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdnZXRQZXJmb3JtYW5jZURhdGFUeXBlcyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZ2V0UGVyZm9ybWFuY2VEYXRhJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZ2V0UGVyZm9ybWFuY2VEYXRhJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3BhY2thZ2VOYW1lJywgJ2RhdGFUeXBlJ10sIG9wdGlvbmFsOiBbJ2RhdGFSZWFkVGltZW91dCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvcHJlc3Nfa2V5Y29kZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3ByZXNzS2V5Q29kZScsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydrZXljb2RlJ10sIG9wdGlvbmFsOiBbJ21ldGFzdGF0ZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvbG9uZ19wcmVzc19rZXljb2RlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnbG9uZ1ByZXNzS2V5Q29kZScsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydrZXljb2RlJ10sIG9wdGlvbmFsOiBbJ21ldGFzdGF0ZSddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvZmluZ2VyX3ByaW50Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZmluZ2VycHJpbnQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnZmluZ2VycHJpbnRJZCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2Uvc2VuZF9zbXMnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZW5kU01TJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3Bob25lTnVtYmVyJywgJ21lc3NhZ2UnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL2dzbV9jYWxsJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZ3NtQ2FsbCcsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydwaG9uZU51bWJlcicsICdhY3Rpb24nXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL2dzbV9zaWduYWwnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdnc21TaWduYWwnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc2lnbmFsU3RyZW5naCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvZ3NtX3ZvaWNlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZ3NtVm9pY2UnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc3RhdGUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL3Bvd2VyX2NhcGFjaXR5Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncG93ZXJDYXBhY2l0eScsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydwZXJjZW50J119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9wb3dlcl9hYyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3Bvd2VyQUMnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc3RhdGUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL25ldHdvcmtfc3BlZWQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICduZXR3b3JrU3BlZWQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnbmV0c3BlZWQnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL2tleWV2ZW50Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAna2V5ZXZlbnQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsna2V5Y29kZSddLCBvcHRpb25hbDogWydtZXRhc3RhdGUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL3JvdGF0ZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ21vYmlsZVJvdGF0aW9uJywgcGF5bG9hZFBhcmFtczoge1xuICAgICAgcmVxdWlyZWQ6IFsneCcsICd5JywgJ3JhZGl1cycsICdyb3RhdGlvbicsICd0b3VjaENvdW50JywgJ2R1cmF0aW9uJ10sXG4gICAgICBvcHRpb25hbDogWydlbGVtZW50J10gfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvY3VycmVudF9hY3Rpdml0eSc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0Q3VycmVudEFjdGl2aXR5J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvY3VycmVudF9wYWNrYWdlJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRDdXJyZW50UGFja2FnZSd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL2luc3RhbGxfYXBwJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnaW5zdGFsbEFwcCcsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydhcHBQYXRoJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9yZW1vdmVfYXBwJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncmVtb3ZlQXBwJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbWydhcHBJZCddLCBbJ2J1bmRsZUlkJ11dfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2UvYXBwX2luc3RhbGxlZCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2lzQXBwSW5zdGFsbGVkJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2J1bmRsZUlkJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9oaWRlX2tleWJvYXJkJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnaGlkZUtleWJvYXJkJywgcGF5bG9hZFBhcmFtczoge29wdGlvbmFsOiBbJ3N0cmF0ZWd5JywgJ2tleScsICdrZXlDb2RlJywgJ2tleU5hbWUnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL2lzX2tleWJvYXJkX3Nob3duJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdpc0tleWJvYXJkU2hvd24nfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9wdXNoX2ZpbGUnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdwdXNoRmlsZScsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydwYXRoJywgJ2RhdGEnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL3B1bGxfZmlsZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3B1bGxGaWxlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3BhdGgnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vZGV2aWNlL3B1bGxfZm9sZGVyJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncHVsbEZvbGRlcicsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydwYXRoJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS90b2dnbGVfYWlycGxhbmVfbW9kZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RvZ2dsZUZsaWdodE1vZGUnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS90b2dnbGVfZGF0YSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RvZ2dsZURhdGEnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS90b2dnbGVfd2lmaSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RvZ2dsZVdpRmknfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS90b2dnbGVfbG9jYXRpb25fc2VydmljZXMnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICd0b2dnbGVMb2NhdGlvblNlcnZpY2VzJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2Uvb3Blbl9ub3RpZmljYXRpb25zJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnb3Blbk5vdGlmaWNhdGlvbnMnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9zdGFydF9hY3Rpdml0eSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3N0YXJ0QWN0aXZpdHknLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnYXBwUGFja2FnZScsICdhcHBBY3Rpdml0eSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDogWydhcHBXYWl0UGFja2FnZScsICdhcHBXYWl0QWN0aXZpdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlbnRBY3Rpb24nLCAnaW50ZW50Q2F0ZWdvcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlbnRGbGFncycsICdvcHRpb25hbEludGVudEFyZ3VtZW50cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbnRTdG9wQXBwT25SZXNldCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9kZXZpY2Uvc3lzdGVtX2JhcnMnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldFN5c3RlbUJhcnMnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2RldmljZS9kaXNwbGF5X2RlbnNpdHknOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldERpc3BsYXlEZW5zaXR5J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9zaW11bGF0b3IvdG91Y2hfaWQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICd0b3VjaElkJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ21hdGNoJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL3NpbXVsYXRvci90b2dnbGVfdG91Y2hfaWRfZW5yb2xsbWVudCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3RvZ2dsZUVucm9sbFRvdWNoSWQnLCBwYXlsb2FkUGFyYW1zOiB7b3B0aW9uYWw6IFsnZW5hYmxlZCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9hcHAvbGF1bmNoJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnbGF1bmNoQXBwJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9hcHAvY2xvc2UnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdjbG9zZUFwcCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vYXBwL3Jlc2V0Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncmVzZXQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2FwcC9iYWNrZ3JvdW5kJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnYmFja2dyb3VuZCcsIHBheWxvYWRQYXJhbXM6IHtyZXF1aXJlZDogWydzZWNvbmRzJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2FwcC9lbmRfdGVzdF9jb3ZlcmFnZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2VuZENvdmVyYWdlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ2ludGVudCcsICdwYXRoJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2FwcC9zdHJpbmdzJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZ2V0U3RyaW5ncycsIHBheWxvYWRQYXJhbXM6IHtvcHRpb25hbDogWydsYW5ndWFnZScsICdzdHJpbmdGaWxlJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2VsZW1lbnQvOmVsZW1lbnRJZC92YWx1ZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3NldFZhbHVlSW1tZWRpYXRlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3ZhbHVlJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL2VsZW1lbnQvOmVsZW1lbnRJZC9yZXBsYWNlX3ZhbHVlJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncmVwbGFjZVZhbHVlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3ZhbHVlJ119fVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYXBwaXVtL3NldHRpbmdzJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAndXBkYXRlU2V0dGluZ3MnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc2V0dGluZ3MnXX19LFxuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRTZXR0aW5ncyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hcHBpdW0vcmVjZWl2ZV9hc3luY19yZXNwb25zZSc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3JlY2VpdmVBc3luY1Jlc3BvbnNlJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3Jlc3BvbnNlJ119fVxuICB9LFxuXG5cbiAgLypcbiAgICogVGhlIFczQyBzcGVjIGhhcyBzb21lIGNoYW5nZXMgdG8gdGhlIHdpcmUgcHJvdG9jb2wuXG4gICAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbFxuICAgKiBCZWdpbiB0byBhZGQgdGhvc2UgY2hhbmdlcyBoZXJlLCBrZWVwaW5nIHRoZSBvbGQgdmVyc2lvblxuICAgKiBzaW5jZSBjbGllbnRzIHN0aWxsIGltcGxlbWVudCB0aGVtLlxuICAgKi9cbiAgLy8gb2xkIGFsZXJ0c1xuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYWxlcnRfdGV4dCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0QWxlcnRUZXh0J30sXG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZXRBbGVydFRleHQnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsndGV4dCddfX1cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FjY2VwdF9hbGVydCc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3Bvc3RBY2NlcHRBbGVydCd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9kaXNtaXNzX2FsZXJ0Jzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAncG9zdERpc21pc3NBbGVydCd9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbCN1c2VyLXByb21wdHNcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2FsZXJ0L3RleHQnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldEFsZXJ0VGV4dCd9LFxuICAgIFBPU1Q6IHtjb21tYW5kOiAnc2V0QWxlcnRUZXh0JywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3RleHQnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9hbGVydC9hY2NlcHQnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdwb3N0QWNjZXB0QWxlcnQnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvYWxlcnQvZGlzbWlzcyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ3Bvc3REaXNtaXNzQWxlcnQnfVxuICB9LFxuICAvLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyL3dlYmRyaXZlci1zcGVjLmh0bWwjZ2V0LWVsZW1lbnQtcmVjdFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL3JlY3QnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldEVsZW1lbnRSZWN0J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3dpbmRvdy9oYW5kbGVzJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRXaW5kb3dIYW5kbGVzJ31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2V4ZWN1dGUvc3luYyc6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2V4ZWN1dGUnLCBwYXlsb2FkUGFyYW1zOiB7cmVxdWlyZWQ6IFsnc2NyaXB0JywgJ2FyZ3MnXX19XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9leGVjdXRlL2FzeW5jJzoge1xuICAgIFBPU1Q6IHtjb21tYW5kOiAnZXhlY3V0ZUFzeW5jJywgcGF5bG9hZFBhcmFtczoge3JlcXVpcmVkOiBbJ3NjcmlwdCcsICdhcmdzJ119fVxuICB9LFxuICAvLyBQcmUtVzNDIGVuZHBvaW50IGZvciBlbGVtZW50IHNjcmVlbnNob3RcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3NjcmVlbnNob3QvOmVsZW1lbnRJZCc6IHtcbiAgICBHRVQ6IHtjb21tYW5kOiAnZ2V0RWxlbWVudFNjcmVlbnNob3QnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL3NjcmVlbnNob3QnOiB7XG4gICAgR0VUOiB7Y29tbWFuZDogJ2dldEVsZW1lbnRTY3JlZW5zaG90J31cbiAgfSxcbiAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3dpbmRvdy9yZWN0Jzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRXaW5kb3dSZWN0J30sXG4gICAgUE9TVDoge2NvbW1hbmQ6ICdzZXRXaW5kb3dSZWN0J30sXG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC93aW5kb3cvbWF4aW1pemUnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdtYXhpbWl6ZVdpbmRvdyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC93aW5kb3cvbWluaW1pemUnOiB7XG4gICAgUE9TVDoge2NvbW1hbmQ6ICdtaW5pbWl6ZVdpbmRvdyd9XG4gIH0sXG4gICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC93aW5kb3cvZnVsbHNjcmVlbic6IHtcbiAgICBQT1NUOiB7Y29tbWFuZDogJ2Z1bGxTY3JlZW5XaW5kb3cnfVxuICB9LFxuICAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC86ZWxlbWVudElkL3Byb3BlcnR5LzpuYW1lJzoge1xuICAgIEdFVDoge2NvbW1hbmQ6ICdnZXRQcm9wZXJ0eSd9XG4gIH0sXG59O1xuXG4vLyBkcml2ZXIgY29tbWFuZCBuYW1lc1xubGV0IEFMTF9DT01NQU5EUyA9IFtdO1xuZm9yIChsZXQgdiBvZiBfLnZhbHVlcyhNRVRIT0RfTUFQKSkge1xuICBmb3IgKGxldCBtIG9mIF8udmFsdWVzKHYpKSB7XG4gICAgaWYgKG0uY29tbWFuZCkge1xuICAgICAgQUxMX0NPTU1BTkRTLnB1c2gobS5jb21tYW5kKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgUkVfRVNDQVBFID0gL1tcXC1cXFtcXF17fSgpKz8uLFxcXFxcXF4kfCNcXHNdL2c7XG5jb25zdCBSRV9QQVJBTSA9IC8oWzoqXSkoXFx3KykvZztcblxuY2xhc3MgUm91dGUge1xuICBjb25zdHJ1Y3RvciAocm91dGUpIHtcbiAgICB0aGlzLnBhcmFtTmFtZXMgPSBbXTtcblxuICAgIGxldCByZVN0ciA9IHJvdXRlLnJlcGxhY2UoUkVfRVNDQVBFLCBcIlxcXFwkJlwiKTtcbiAgICByZVN0ciA9IHJlU3RyLnJlcGxhY2UoUkVfUEFSQU0sIChfLCBtb2RlLCBuYW1lKSA9PiB7XG4gICAgICB0aGlzLnBhcmFtTmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHJldHVybiBtb2RlID09PSBcIjpcIiA/IFwiKFteL10qKVwiIDogXCIoLiopXCI7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZVJlZ2V4cCA9IG5ldyBSZWdFeHAoYF4ke3JlU3RyfSRgKTtcbiAgfVxuXG4gIHBhcnNlICh1cmwpIHtcbiAgICBsZXQgbWF0Y2hlcyA9IHVybC5tYXRjaCh0aGlzLnJvdXRlUmVnZXhwKTtcbiAgICBpZiAoIW1hdGNoZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgIGxldCBpID0gMDtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgd2hpbGUgKGkgPCB0aGlzLnBhcmFtTmFtZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwYXJhbU5hbWUgPSB0aGlzLnBhcmFtTmFtZXNbaSsrXTtcbiAgICAgIHBhcmFtc1twYXJhbU5hbWVdID0gbWF0Y2hlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuXG5mdW5jdGlvbiByb3V0ZVRvQ29tbWFuZE5hbWUgKGVuZHBvaW50LCBtZXRob2QpIHtcbiAgbGV0IGRzdFJvdXRlID0gbnVsbDtcbiAgY29uc3QgYWN0dWFsRW5kcG9pbnQgPSBfLnN0YXJ0c1dpdGgoZW5kcG9pbnQsICcvJykgPyBlbmRwb2ludCA6IGAvJHtlbmRwb2ludH1gO1xuICBmb3IgKGxldCBjdXJyZW50Um91dGUgb2YgXy5rZXlzKE1FVEhPRF9NQVApKSB7XG4gICAgY29uc3Qgcm91dGUgPSBuZXcgUm91dGUoY3VycmVudFJvdXRlKTtcbiAgICAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZSBhY3R1YWwgc2Vzc2lvbiBpZCBmb3IgbWF0Y2hpbmdcbiAgICBpZiAocm91dGUucGFyc2UoYC93ZC9odWIvc2Vzc2lvbi9pZ25vcmVkLXNlc3Npb24taWQke2FjdHVhbEVuZHBvaW50fWApIHx8XG4gICAgICAgIHJvdXRlLnBhcnNlKGAvd2QvaHViJHthY3R1YWxFbmRwb2ludH1gKSB8fCByb3V0ZS5wYXJzZShhY3R1YWxFbmRwb2ludCkpIHtcbiAgICAgIGRzdFJvdXRlID0gY3VycmVudFJvdXRlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICghZHN0Um91dGUpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuXG4gIGNvbnN0IG1ldGhvZHMgPSBfLmdldChNRVRIT0RfTUFQLCBkc3RSb3V0ZSk7XG4gIGlmIChfLmhhcyhtZXRob2RzLCBtZXRob2QpKSB7XG4gICAgY29uc3QgZHN0TWV0aG9kID0gXy5nZXQobWV0aG9kcywgbWV0aG9kKTtcbiAgICBpZiAoZHN0TWV0aG9kLmNvbW1hbmQpIHtcbiAgICAgIHJldHVybiBkc3RNZXRob2QuY29tbWFuZDtcbiAgICB9XG4gIH1cbn1cblxuLy8gZHJpdmVyIGNvbW1hbmRzIHRoYXQgZG8gbm90IHJlcXVpcmUgYSBzZXNzaW9uIHRvIGFscmVhZHkgZXhpc3RcbmNvbnN0IE5PX1NFU1NJT05fSURfQ09NTUFORFMgPSBbJ2NyZWF0ZVNlc3Npb24nLCAnZ2V0U3RhdHVzJywgJ2dldFNlc3Npb25zJ107XG5cbmV4cG9ydCB7IE1FVEhPRF9NQVAsIEFMTF9DT01NQU5EUywgTk9fU0VTU0lPTl9JRF9DT01NQU5EUywgcm91dGVUb0NvbW1hbmROYW1lIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
